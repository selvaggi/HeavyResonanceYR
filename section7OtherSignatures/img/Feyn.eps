%!PS-Adobe-3.0 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig.pdf
%%Creator: Adobe Acrobat 9.4.0
%%For: Administrator
%%CreationDate: 2010/11/5, 17:12:53
%%BoundingBox: 127 205 470 614
%%HiResBoundingBox: 0 0 595.2701 841.8201
%%CropBox: 0 0 595.2701 841.8201
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: 1
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 644 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2010-11-05T17:12:06Z"
   xmp:CreatorTool=" TeX output 2010.11.05:1711"
   pdf:Producer="DVIPDFMx (20031116), Copyright © 2002 by Jin-Hwan Cho and Shunsaku Hirata, Copyright © 1998, 1999 by Mark A. Wicks"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -841.82 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.82 li
595.27 841.82 li
595.27 0 li
cp
clp
[1 0 0 1 0 0 ]ct
195.255 257.393 mo
195.255 256.724 194.711 256.179 194.04 256.179 cv
193.37 256.179 192.826 256.724 192.826 257.393 cv
192.826 258.065 193.37 258.608 194.04 258.608 cv
194.711 258.608 195.255 258.065 195.255 257.393 cv
false sop
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
1.12087 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
163.216 285.416 mo
194.04 257.393 li
@
180.909 269.332 mo
174.689 271.656 li
178.006 275.304 li
180.909 269.332 li
f
[3.73626 3.73626 ] 0 dsh
231.402 257.393 mo
212.722 257.393 li
@
[3.73626 3.73626 ] 0 dsh
212.722 257.393 mo
194.04 257.393 li
@
209.639 257.393 mo
215.804 259.861 li
215.804 254.928 li
209.639 257.393 li
f
[] 0 dsh
163.216 229.372 mo
194.04 257.393 li
@
180.909 245.456 mo
178.006 239.485 li
174.689 243.135 li
180.909 245.456 li
f
%ADOBeginSubsetFont: YEKBAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /YEKBAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /minus put
def
/FontBBox {0 -216 694 716} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 -0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0416667 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUC+CMSY10 /YEKBAA+CMSY10 findfont ct_VMDictPut
/IDENUC+CMSY10*1 
[32{/.notdef}rp /minus 223{/.notdef}rp]
IDENUC+CMSY10 nf
IDENUC+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
254.494 261.278 mo
( )sh
%ADOBeginSubsetFont: LLIAAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LLIAAA+CMMI12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
dup 14 /delta put
dup 21 /lambda put
dup 59 /comma put
dup 67 /C put
dup 75 /K put
dup 80 /P put
dup 81 /Q put
dup 97 /a put
dup 98 /b put
dup 105 /i put
dup 106 /j put
dup 113 /q put
def
/FontBBox {-13 -250 874 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/alpha <1C60D8A8C9B663CCDD515076914F6743DFBC3D2377E329AD0BAE0D04
239FB22305C715393AB17229DDDC1E8255E04FE0ED0F68AF872D35338AC36FA6
5EB33C8A34A3C3F165813FC297230F26AED61E71899549D52261D71D4032E098
FB9F945525C7482F9D647DFDA9816E2C70151535709000EDD55269B7DC48F098
E2C899DAA1C89460BEF1D70D70D8BC1C8DCA4B78E21C1BCAD0DE5A279737BEFB
F37B4C1136BB89FFF2CD071442> |-
/beta <1C60D8A8C9B7924C40F39E809CED4CA7DCE2AE6F860DEF7805C7A5DC2
B50D3013EB2F049031CFA68725E852B3AEE10213E7686C097E52440B302D8B45
8E9C52D3222F242D21A20CDC03EC879573130767EA4599E54FDAF9CBFC2EFB43
54803560EF32D2A9861E3E1A3BCB53F8E026FA077D4FAB0456D7A1CEB8AE6A03
85BE19971CCC6F86A4B16D9368313C4203DF0B794DAE3E08BD036594D0EDD1DC
945BBF026E7F7801BEF04610237704558DF330FCF5B3000E6CC20B0CAC4D8732
880FCEDFF9DEFEE03F51E191722B97E60450404B98ADC8F17C1416ABD99720EA
498B08D44B2E00B60D4CAC7FDB969DBC5FC0558397C46DD3F968A1ACE6A4E0C7
8F985F49284C313E265CF50912B16979D4F81C55A4F6EF6B8802CCF3B0372B8D
C68262693272057D139DDD523EE8331B26836325EFB4C4A4D0539378FEFF2F63
2A9E9996EDBDA9D6BE39CDBFC58026E5A99B400BB6CA35839807280620D012EC
414C29C1EFC49408E48C728749CA7536B019014C6D686FD61682731856107780
E1A27EA62482F6086DF0AA7ACAFEBDD3A5B8498237B99C295DF830E93769BE59
CE2FDF0846703A5F8> |-
/delta <1C60D8A8C9B76A0DB1D898660DCC3712FEA7B2F6ABCFCEB16D125DCC
F4B78126C66810EB2CE81B1EE86D1B4EBCC604FF915252F21F13F04A8CE295DA
67AB18C06D10E772134A58AC943C2D6AF3A743C8E59FEF27317865D1AEACA1C5
273D8111AF41668B546EA278890D47E686E7E943245FB573B5B8CF3A92D1AE74
915F679E0E78340E271EDB8C0880952128432C2E20BED77FC7499D> |-
/lambda <1C60D8A8C9B7E02ADCCD1D48F1FC32A53A9A2A2D08859EAC350017E
2072EB419663281C16251C64449CD11F08D61036CE5C50A6844497B83546D5C6
BE847215278B840C9CD4DDA2399EF4400AA496D02CF09E3F954CD371D0627204
22727DAB8D80FD1F8D73489B7DD007D014A94BF64E77F5EFDA688F75D5B13EF0
85C63438A75A43FFE6562F37B2BF6DFE59EAB56> |-
/comma <1C60D8A8C9B85D12C7267AF0D2F66AB4AC257C1635F0E44E779EA91D
17D919E74DC693733D9D0583EFC67F7F717AA0A2AD3E3A69370B6D8115F79AC7
377BB34BFA4D6C876CD381E28CBE6ED5880877DF601260E0> |-
/C <1C60D8A8C9B6317DF6DDBD86C7212DE4863F7C5C0964ACEE7B74B9276893
56AFC0B596838B466B1CF29A6F395E5A6DFA5042CC522453552400AF1554282E
5B87AD58E242FEC54F03FF853F059E2775B6F12C16E705E66681B10DF5E49EC8
4BD5766BFA6879F5EF07C28E739C1D7957BA018F5D3A91A81494E71DC8206045
F1373C117C389328FFDBBB729CFCA4FD1D81B29BDE> |-
/K <1C60D8A8C9B6B41CC7B6F4868C20A4876DA60BA87C875502A142C63D914E
05E8A38EE279C6999FE7C9EFB2021A6236873178DCBE675211B65A086FCCAA44
2667C1F465352796D9EFC1DA51D2ED0B52A02DE3C0A77AC814E277B783A15823
5032ECEEB4FCDE3C0393DE029044E66AE85AD03B51872595F2FECE7A5B40CD45
7FA955B71F7B03B29B60077B82629556586DA9888F0A257C534D78034A6D8A52
911FD080522D9DA8E639B0432735E69ECEE2931B863EAB545651B92FB723E3A7
91EC53DB5F6C131CAB4DC18ED3E763F6124BEF34CEBBC67D3D55AD34F2F0C9F5
ABFACB864E7C512872131D41F7D41FF770B0C2782EBB9C13E76E15DE4784D8FE
F9DF37A135801754381B2F0C8E1A2D7E3728BD92F1C019451707273DD7D91C2B
0EEF12DB1A530E63EEA252FBC1DEDB> |-
/P <1C60D8A8C9B66A6BD6F90888768F67EC15C77D9BB35B63C2D1057A70C423
B7B04CED65B25A2BA2E3035CF8B7A4352B61B93B045F9591F90BDC6EA846560E
BDA4B49DE9CFFE64713EAB618DC2D4C304F9B6E1D331A8E26197DBA96805DF67
AF5DA921ACED4BE4C351291FDAC855042EEF34159F43E61A7450302F234FE13B
7493E51280A4B5C7BBAE5AB5BD6C554CB6AA29C4834D8B9BAF45180CC1E2F2C6
147E4AC7261CFF8A5850EFC6> |-
/Q <1C60D8A8C9B6FA8E8A1C272F38CB0D84F176A3527DA3B4E3A44ACA0FDD1A
5764FFDAFD08DDE8D2D2FF2868E8815C981B4A1F21298CD48DB5C27D86D61397
1744BD8BEF5C0FA8F465EE5D9FC985D96410E89469DF363B55C84E9211966065
376877B7E2877D612C82939D0EEB889916A196F4D109E433D176E9BE80C1DF4F
8BFD3AD84983755CB2FA44471771B4CA5A74261E045726819E0EFCC96FF722C6
378379B81E73EBA49603BB4358E31E14D9C19BAED0635F1533749F689BA4483E
4425FAEF21FCB4FAE060479CF7EEDE5F0A00EA31379260E9A23C088D60DEFE99
EFAB84BC3867> |-
/a <1C60D8A8C9B7B9B9A72E7DE322C6832BE644423B0A88991AD27EBB446C4B
78A15D1551E0041671A94D00FAC341F63F9F6BD0BD1F7E1159EBC4D3A51076CB
AD3084D7BB435F13C64A1022F92EAF97A9B9FAB89D5EF4E00013898C527E1024
1850938E8A18F13139220B05353D163E079F72D46D074AF4BE0712F52399BD5B
FEDD0FF6EDB7D541DC9FE47616272E42EA7EC15CA1C36E943C9AE8E71D7BF511
B93807535299A1710F16F2B27DB38539B4CC43D74740BCDB557F037C4BE96327
1D0813FE14E2562EE6FDE375> |-
/b <1C60D8A8C9B71B40C6A29AD2E16261E85DEB2A2904453E3F4B1AEE452107
7F1299DB1CF39C676B9E944DA361BD5030A751C0E81AB09A369396CCB9FB49D2
C3BDFE91032C18F10D78F127380677E6EEE1EC9219CE072EDACAB58BAA15DB80
F7E3AC3316D4F4759888DAD843D0B805AD6A3E827898B449EF1CD9F41509CA1B
78DD2826923C146C2ED3A4246063FE4B060AB93544B7498E861067B5C33A3254
B4D780E6EBDF9502663C75FE99D7DC61DB2B5644> |-
/i <1C60D8A8C9B81CBBCC9F41C887ED28EA22C57A3139C542E9573461192CE0
9AE9C0F5A2269B832BD975457B128F2140299471C776B699C2F729D70E5C6F43
2AECCA0017BCAAAB41A89ACD7B0E2EDEB169CC7565CC530B1F58FDCE083AE40C
648E25BE9E48F799563668AC4DF549AAC4C34CD843051CA602BBDFEE429DC446
B0F943E9E0586665C85BD97EAA1E95639F0357BDD3639B828AC9914813FDA5FD
07959EDCB69CE422D7198DCD018F3236B9E579FB73375A> |-
/j <1C60D8A8C9B706531450AB347376B2268AF178549961B67CD144DB1EBC81
1BEB98DFA854EF3B933A2B064145330BDDE00A12487598DA610F913FAE183BED
E76238BE38951D92FD55388A0BD995B1F9F58158211EA87918252863FF7AD2FB
CDE28303257DE5CAFFB0A652129C2D67C65F29A88A65FB34E4C70568C74FC740
96D9E11F41652C3989ADCBD77F7A687CF1EAEBB1669229DAFD4D89B335B95C6F
D7D7C71D5B5A41BC38EFA1FF2E119553> |-
/q <1C60D8A8C9B7693F7E4502F380845660BCAE31E0A4910EF280982D2336A5
5CD01E1E849E30A30413AE349B804B80E52B42076FB12888B617554E0D194A94
06C6D5ACC1B364E716CF14043C791180DF2EA4CD33ABBFBC5D2E5498F733578E
EBD39BAA30C0938F1F3F82054FBBBEE4F4045CE5D9FB049102527F902979CB53
A38578D001BD78CF390499D6BA88C57870BBBD7B350E047AA9C5FB8EC684D993
3D175F30D9928BA331066F378305A252FCF1A31A1C46A92D4DEC4611445827> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUD+CMMI12 /LLIAAA+CMMI12 findfont ct_VMDictPut
/IDENUD+CMMI12*1 
[11{/.notdef}rp /alpha /beta /.notdef /delta 6{/.notdef}rp /lambda 37{/.notdef}rp 
/comma 7{/.notdef}rp /C 7{/.notdef}rp /K 4{/.notdef}rp /P /Q 
15{/.notdef}rp /a /b 6{/.notdef}rp /i /j 6{/.notdef}rp /q 
142{/.notdef}rp]
IDENUD+CMMI12 nf
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
263.125 261.278 mo
(i)sh
%ADOBeginSubsetFont: NQPBAA+CMR12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NQPBAA+CMR12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 46 /period put
dup 49 /one put
dup 66 /B put
def
/FontBBox {0 -251 707 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [65] def
/StemSnapH [20 29] def
/StemSnapV [65 81] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
7 dict dup begin
/parenleft <1C60D8A8C9B73F59DC1736782E4C1C19EDD64255E2393C5024B2
8DF3DAD1F658B414FFC7F6340C09154655276EBE3A864FAA5F25254ADD1D66AD
32F6F0ED72B2779D8B9CBC436F290A3FD41D2FEAF5BB166225967C60AC032644
61C3B610DAE07B90E04CD1> |-
/parenright <1C60D8A8C9B73F59DC1736782E4C1C19F750FC29D76AE903C84
F39596182123C2F9BBABDCD183CD0A7F2DCF7F475747A3C66A218A2ACC372926
7893607CC6D4EBAC9D3F2D1F9916BC173F64DE0D89D4D55EAF7634E8836B2C24
5A5674692FCF9DAC6CD845FC5E88E> |-
/plus <1C60D8A8C9B6EC3453F6145863BD3727D6A0863C71D59FC813989C24F
CD98311B732F6A8FCF177973035F5271F42F98EBFD01B1EECA8986C125D8A764
190C26002AB68C4BFE8E38ED199515C149B924611CAC04350BE9C56E03E7A> |-
/period <1C60D8A8C9B85D12B760F96B699981ADCB57A7D673D446BE57B8C9B
CADDF9A80034920FA8DD7ED00> |-
/one <1C60D8A8C9B752AB372B1338726DAE50702AE3FC3505C230AA8B538E88
A64BC50555C15C4F9C1C8D25ACFD4CFF046EBC17B6B6CE5B6DDF472F018C84C2
D8CA302ED5402A29C0899E66EA3A4575040CA2E8AB00A92CB377A30E0A8E01C5
5A1866557B8C8E354DD627142F4AFBA8F01617> |-
/B <1C60D8A8C9B628230B2400E451D7BEDBEB5988CEE1051B4AB6DFE34F7ED0
39B657DA21A0BEF19E3DDCB8799D6DB5392BC5EE694B8D27DB02E5D00987FE97
E3C9DDED241A83A75515A6F00799DDCEBF82CF91866CE2B0A5786D289BC8BC56
EE530B75EFE400436E3B9F796BA5C1D287AF58B8541DF4039A959B39B3866D06
941918675E6FC2470B324A07> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUE+CMR12 /NQPBAA+CMR12 findfont ct_VMDictPut
/IDENUE+CMR12*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp /period 2{/.notdef}rp 
/one 16{/.notdef}rp /B 189{/.notdef}rp]
IDENUE+CMR12 nf
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
266.824 261.278 mo
(\(1+)
[4.25943 7.95795 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
290.026 261.278 mo
(\016)sh
%ADOBeginSubsetFont: LLIBAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LLIBAA+CMMI8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 12 /beta put
dup 28 /tau put
dup 78 /N put
dup 81 /Q put
dup 97 /a put
dup 98 /b put
dup 106 /j put
dup 113 /q put
def
/FontBBox {-14 -215 916 714} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/alpha <1C60D8A8C9B65F8A3BCC2799D8771214626480D93F2E60B123B79DF1
873D6D4F3E3BD4BF09F9CA39030894CCB3E132B12B4463E770FA334D21DCA5A3
01C2828A3DB6F0A0743D1C2A9F4DFD06ED887A7928575AB98D31B3765341326A
68FB75D891D4F329EA0927AF909DF180690FEEE1EE2D4CFF378930A641630372
259BE99E14604F28C2AA507EB5DAD6BB958FBA9A3270E557C136AC50B72D8DCA
7E7434E75F149F11A8DC61F088E2BD918F3A> |-
/beta <1C60D8A8C9B7C7F3A7A9FFDD799C701454A55EFF9DED64ED8161A74DA
2D0BB385D41E15884B7E26FD6B9A4865AA91474AC7854095C143F9EBE4AA9EA6
0CEE7DB7294E7CE951D9CDDDA6451859282AF7050841A37C5C3452A9915039A6
D12BD05425A88A3F357078FFAD9EA70C6D6EF3DB6E1C2FAABF53C4F3E9F9F2CD
28383133C2F6E2D4A54A78BF1B0AAF6819B7CD86D59B43F1EEB0371D2B778B86
10AF7C6F92F46286568923840A830E03D73F002C828435501DE28CDA37DCDBF8
7438DE53B3A464F02C07383C780B9D035804DC32195F2D2B4911AA670E052016
91C033FA89EF2B455FD78AD9E2886ADF577C8328186C50B16877C3DB47D29F15
C> |-
/tau <1C60D8A8C9B74451C7A6D153707AF89DDCE0F91884D3C21432ABD1253C
6DE02D9ADA08F10CE2A2B9BB8A4BD3A38093B96FDA065A0967A13D7C46C5E224
711CF3EDDC9AD8B020D8371E319DA62342C93324A47C6029149B7DF08EA99F8E
CE5E4BBB3020B944705637A4> |-
/N <1C60D8A8C9B6BE2F2D69720FF44FC3B9942C36C99EF9AAFE020A1385D1D2
2442E1F42421FE1D441908C66AF35F34B4E87468C98F635EC10D067239F47F79
2666616D889FA0E7171E0A7A1299638E660B6AD1553CB535A9453289113560D4
79229F8A6E201B5851BF40283F4611579089C6BEAB9656B6DBA7E8EF506F9E25
16EC13A302A9B1E50A7445191121E973ACD032A6EB264253E70264E63D7BB39F
3878E9753BC73728656528745FB8F02F329459990F54842A15259C7D80802CBD
3A5F80E45AB97E311E69D2F464386A7D53BE49D832402CE667FA3D005788B1D7
EED1B39557BBB8DFBB2937D77FCB574ED6882F0526ACA986517127> |-
/Q <1C60D8A8C9B6B6A3A63FEA66F1DD0500AF6A4B2964047E6D80FDDCC0B888
CD57F1F8DE4FABB0D45AAC31BB289666776EBDABEAC8DEC80F61E18A4011A70C
960334861B27309DC6FA6F846AFE6386BA85C7A0A0AED3E41446B35B4AF1DA93
FE8CF3C8809A6D77B5FB5B794210C280C65E19BF221D288558772D779A08D333
FD8A3BE9EAC1F75663065BAA00642C92382CABB462455AA8A81118933EF669FE
41E9E43D9A7A80C114A83B3D2603D4232B1146AD43398952C607BE9BDA8B9387
5EBCB43222A7A9902C069662227CEF8CA73D88CF2EADE76146CC4E55F792485F> |-
/a <1C60D8A8C9B7E7C1D918A3B15153CA6B5BE26AE31C56C5E8EA147D01C983
68E0C774FEAB8136CD368DF727E03257E5108BF84C2D8D8BD9710B792E65504A
E02BFFB732B2935D897B359F51D188DDD7C8496A2490461FC4585D3CE7BD48C4
1FC35A3D5C9D095E8DFCC2B54439D2B6C3F1E218533BDCF0B13CFA530C61605C
86AA1F97863E14F7B27D0446707834C59B38D21B8A32336B60DFB978E5A44F1D
23522E972F9658B60ED49D68A3FE186EF364D06B75928D07F32B> |-
/b <1C60D8A8C9B775D2CA794183E8A400C7BDDE8590B1CEC0C6F2D15B6CFA2A
FE65174D02A949C7059CA560FD994877E653AE65D3B93699AF6503DA15CE0901
289413AC4AEA05C87296A8BA5DB19A993847A44CDA8E05634E15E910BB594D03
9074FDAC407794FC6DE5314076785B8B4799B4B7A82C77AB95CC89F5490689FA
12BB8562D10E68BB15C26A403BD9F4A7B224FBB77806E7C60DA693782A36FAEC
E0019737FDAE3EEB41C78BAFF90B1E> |-
/j <1C60D8A8C9B76E37ED91DCD4EB7DD687F7614CCB8475B9F904D077FE9814
AA93E69D1175F4E6802EA1788AA27F72433F5895683211ED59EEBF5D32EE079C
81F6B97C55B2EFF7C16A1EA01882B71DB511EEB4E75639E7B4B4E3712E9446F2
79B3A7354BB80EEDE38A76761ABC62936A30CD62332A5160A2BCEEA1EDAE79F1
A81AB9B05D1BD5EDDCF488B99F7B8A779BE2C6056B8B82CEECD0C28C90D96DD0> |-
/q <1C60D8A8C9B741FC30E79A4170E42D09EDC956E8A1D9C21697E932D6EE0E
318D0FDF1FD165BE05D404A8DDA6D4D4B7F3766C8A81D06A0FF408C31A831D76
3325D4F07016583AC4374F69F254FA59FE9203AE3CE577C40F57866CB4B76C4F
0BF17FDC9E833B1092C322A17AE8201361506D52EF629BBA98E06DDD6D716669
F643ABE3BC9C0D1D29971DD1C003E08AA3F96E00ED83FE7F8A12E20E8988AB65
EE4129B21F9118CAFC0A1E7AFB7919FC04E3DC7D7B5EA51B891D827C89B8E7> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUF+CMMI8 /LLIBAA+CMMI8 findfont ct_VMDictPut
/IDENUF+CMMI8*1 
[11{/.notdef}rp /alpha /beta 15{/.notdef}rp /tau 49{/.notdef}rp /N 2{/.notdef}rp 
/Q 15{/.notdef}rp /a /b 7{/.notdef}rp /j 6{/.notdef}rp /q 
142{/.notdef}rp]
IDENUF+CMMI8 nf
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
294.846 262.96 mo
(qq)
[3.81119 0 ]xsh
%ADOBeginSubsetFont: FXYAAA+CMSY6 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FXYAAA+CMSY6 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY6.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
def
/FontBBox {0 0 323 559} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 -0 683 708] def
/OtherBlues [-141 -129] def
/StdHW [52] def
/StdVW [52] def
/StemSnapH [52 73] def
/StemSnapV [52 73] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/prime <1C60D8A8C9B72E926E9FFA8DCC27FC10E23EEBB780725636A1E176E2
2A92B7CB7445B056DD5FA628247B1236A6339030B8FCAF81CFB5BEBD970A23C9
B8BCE03738411B9F40> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUG+CMSY6 /FXYAAA+CMSY6 findfont ct_VMDictPut
/IDENUG+CMSY6*1 
[48{/.notdef}rp /prime 207{/.notdef}rp]
IDENUG+CMSY6 nf
IDENUG+CMSY6*1 [5.58343 0 0 -5.58343 0 0 ]msf
302.467 260.83 mo
(0)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
305.494 261.279 mo
(\))sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
309.754 261.279 mo
(\025)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
316.142 254.329 mo
(Q)sh
%ADOBeginSubsetFont: DTOAAA+CMMI6 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /DTOAAA+CMMI6 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI6.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 68 /D put
dup 78 /N put
def
/FontBBox {0 0 1009 683} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [35] def
/StdVW [85] def
/StemSnapH [35 39] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/D <1C60D8A8C9B5E8683EE10D422C2D69EF0F9D051652036115109A0FB78E9E
A36ED948ACBA0B91C8571B86713EF2810BB4B041803F7467A92EF86A064DCEF4
85A1ACC3D53E40154340EAC9377283878EB81859314DC822799C68D3959AD460
CC0B6350576614D41746C6648D2BCE746D5072C4246E18303EE96344D79152AF
58AD4E90655C5D078357A73F27E54A4688B333DAED> |-
/N <1C60D8A8C9B5C96BE5C3E8EB120EE391F39A233835D7C296DBAFC3DDE828
3EAB3CC060D93AB3A158C8068B8C540AC262F78B73B39C782444305121A0BA12
73D314517570D2A3FC0590D982C938C3D0E55F6F900E263029B3915282372B9D
7CE0268094EA9D93425F615094D29898C3CBE77F54EE3F6EF7AA706B839F31E3
7247F8B2A26AF9231F97C1EEBE755A6360375DCA45B33E293F3CFA73A8000CB2
4F9D1AECCCBC6501AC4FCB06373EB9FAEB8C19F9712A9A3CBAB019A0440F0FD9
871D17835C7BA57F9A2307D407AA85AC9090> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUH+CMMI6 /DTOAAA+CMMI6 findfont ct_VMDictPut
/IDENUH+CMMI6*1 
[68{/.notdef}rp /D 9{/.notdef}rp /N 177{/.notdef}rp]
IDENUH+CMMI6 nf
IDENUH+CMMI6*1 [5.58343 0 0 -5.58343 0 0 ]msf
322.419 255.562 mo
(N)sh
327.8 257.467 mo
(D)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
316.142 264.417 mo
(\013\014)
[5.04401 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
334.861 261.279 mo
(K)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
344.949 256.011 mo
(j)sh
344.164 264.417 mo
(ab)
[4.14722 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
352.235 261.278 mo
(CP)
[8.63071 0 ]xsh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
367.927 262.96 mo
(\034)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
130.189 279.1 mo
(q)sh
%ADOBeginSubsetFont: XSAAAA+CMSY8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /XSAAAA+CMSY8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /prime put
def
/FontBBox {0 0 460 559} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 -0 683 704] def
/OtherBlues [-138 -126] def
/StdHW [46] def
/StdVW [46] def
/StemSnapH [46 64] def
/StemSnapV [46 64] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/prime <1C60D8A8C9B84AC0A0D2DBD0A286B6335BF4C25243246F497437E447
8D385C16EBB8EF4478E7DB779902A9E38ABFA30FC6168F6ACAB4B5128EB898A8
EC1CAF4D38C726D997179B48BA30966972D7> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUI+CMSY8 /XSAAAA+CMSY8 findfont ct_VMDictPut
/IDENUI+CMSY8*1 
[48{/.notdef}rp /prime 207{/.notdef}rp]
IDENUI+CMSY8 nf
IDENUI+CMSY8*1 [7.44458 0 0 -7.44458 0 0 ]msf
135.457 275.065 mo
(0)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
138.035 279.1 mo
(;b;\014)
[8.51823 4.5956 8.63057 0 ]xsh
130.861 240.206 mo
(q;a;\013)
[5.26802 8.51823 5.71657 8.51814 0 ]xsh
194.864 249.06 mo
(Q)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
203.494 250.742 mo
(N)sh
IDENUH+CMMI6*1 [5.58343 0 0 -5.58343 0 0 ]msf
209.771 251.975 mo
(D)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
216.496 249.06 mo
(;j)
[8.63058 0 ]xsh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
445.603 260.269 mo
(\(B.1\))
[4.2594 7.73398 3.02618 5.49231 0 ]xsh
161.349 230.678 mo
(.)sh
195.255 321.733 mo
195.255 321.061 194.711 320.518 194.04 320.518 cv
193.37 320.518 192.826 321.061 192.826 321.733 cv
192.826 322.402 193.37 322.947 194.04 322.947 cv
194.711 322.947 195.255 322.402 195.255 321.733 cv
f
163.216 349.754 mo
194.04 321.733 li
@
180.909 333.672 mo
174.689 335.993 li
178.006 339.643 li
180.909 333.672 li
f
194.04 321.733 mo
197.154 317.062 li
200.267 321.733 li
@
200.267 321.733 mo
203.381 326.402 li
206.494 321.733 li
@
206.494 321.733 mo
209.608 317.062 li
212.721 321.733 li
@
212.721 321.733 mo
215.835 326.402 li
218.948 321.733 li
@
218.948 321.733 mo
222.061 317.062 li
225.174 321.733 li
@
225.174 321.733 mo
228.288 326.402 li
231.402 321.733 li
@
163.216 293.71 mo
194.04 321.733 li
@
180.909 309.796 mo
178.006 303.822 li
174.689 307.472 li
180.909 309.796 li
f
%ADOBeginSubsetFont: LLIAAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUD+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/gamma <1C60D8A8C9B7A08609F0BE3386DB25AA3C40F69716938B3CD608B8F4
AC3CEB11F3463C0A39522D481E09FA2BAC303604566E11A733A443F6D4DAE2B4
D699CE4FC228D342E5BB9DFAF924011D955409F8F13B245291EF956CE9983875
91B378F72CC874BF1490A1739EFD80F9DEEFD53CE9050D7A6FBF75BC130439CB
3672C5F4D4464673665ADEF12BAB675322E2CA31AEF558DBE2ADB50892A3991F
71DB17AEF27E29640D3AD6B7A552698841A7258BDE94F0E078A9FB94964BB7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUD+CMMI12 /Encoding get
dup 13 /gamma put
pop
%ADOEndSubsetFont
/IDENUD+CMMI12*1 
[11{/.notdef}rp /alpha /beta /gamma /delta 6{/.notdef}rp /lambda 37{/.notdef}rp 
/comma 7{/.notdef}rp /C 7{/.notdef}rp /K 4{/.notdef}rp /P /Q 
15{/.notdef}rp /a /b 6{/.notdef}rp /i /j 6{/.notdef}rp /q 
142{/.notdef}rp]
IDENUD+CMMI12 nf
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
254.494 311.718 mo
(q)sh
%ADOBeginSubsetFont: NQPBAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUE+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B752AB3751B7115F440B017A800C9966F9D6C8D899B69B53
5555547C6BA24B6E1F046DE16579F205857804134562B1E66D1B74F5C065BE47
58EAA51BE86F23919207272A8508C865B8FC972FA5EECD6D618D03C944A0B510
56C9A643AEE9E15B7819729DCB8546556AE1AA15DC7D1BB3C46B74A340814C18
94F0D8820D897F> |-
/colon <1C60D8A8C9B85D12B760F97E35CE56A4095E9F7AA1A00656E95C0DD5
2F4E15A0283B28A01742D3598E509B6264639DC3B168E3F06534E138A11F64F5
2DCAA93297CC1E84D3> |-
/equal <1C60D8A8C9B6EC349A8886189F14557AE5AE1BE54B8844DBBD5FFC11
85002109161E9CDDBCF6C766068263974B75D4C50D73DF79CFBCF5B5F02880B0
97537282A41165A8E9A961F3C9F162CE7D46C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUE+CMR12 /Encoding get
dup 50 /two put
dup 58 /colon put
dup 61 /equal put
pop
%ADOEndSubsetFont
/IDENUE+CMR12*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp /period 2{/.notdef}rp 
/one /two 7{/.notdef}rp /colon 2{/.notdef}rp /equal 4{/.notdef}rp /B 
189{/.notdef}rp]
IDENUE+CMR12 nf
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
262.789 311.718 mo
(=)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
274.446 311.718 mo
(q)sh
IDENUI+CMSY8*1 [7.44458 0 0 -7.44458 0 0 ]msf
279.714 307.683 mo
(0)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
285.319 311.718 mo
(:)sh
%ADOBeginSubsetFont: YEKBAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUC+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/negationslash <1C60D8A8C9C4A6C26B10FB8D5BDE6CDBBEB886041A010C58
7BDBB6C6D81F15A730606F174AB3495E2650C76FA5AB4C017DE7B4889B1BFCC1
5958E3BD07C0EB458EBB4CF8D9C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUC+CMSY10 /Encoding get
dup 54 /negationslash put
pop
%ADOEndSubsetFont
/IDENUC+CMSY10*1 
[32{/.notdef}rp /minus 21{/.notdef}rp /negationslash 201{/.notdef}rp]
IDENUC+CMSY10 nf
IDENUC+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
291.484 311.718 mo
( )sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
300.114 311.718 mo
(i\025)
[3.69888 0 ]xsh
IDENUI+CMSY8*1 [7.44458 0 0 -7.44458 0 0 ]msf
310.203 304.656 mo
(0)sh
%ADOBeginSubsetFont: LLIBAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUF+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mu <1C60D8A8C9B672D420A18B45CF9CD91BFFEF8A6FD990749ACB73A18C210
BFEA50BB50C0CD7B5E4E22B6BE0250959F787F0DC2DC8325858C079907763137
72969B7EDFF26CB692C2A5616F9A33E9EB334E3162A0EC7641412D2D5606C848
5F41190F19776986202E2E1E491EE887C2EE164B6CAB36370540634FEF3AB745
4EB0F6143CEB708F0D64BE8D41E8D0247494716DF468ED1E1AC3A3A1A6DC05F4
945FADCFCD2BB93A216FB5D5803DA0AD614B2BA28E0AE32AEA42F43ED4429A07
D3F308355862D63DDEC4ED2724D5450EDB700> |-
/D <1C60D8A8C9B69A171E0602B6EA9F7FD3661687B9D0318153871D0174B66A
21A15566B857CCB904BD2C86D67025FB2C7CC238903A654C854AF5ADE6C7FC02
16CDEC0E082EB2AA5728F75C9B369F6C5150B933FE09A05084C6258A600A6061
FAA85A3A88BDFDED50AB5542651DB372A9234088F1AABFC5E18119E277941214
B56E87C67F8AE465C8BCFE385A8FC2> |-
/L <1C60D8A8C9B6079F1E7AD7748A0DA4BEEA66A9E2351439E3459E06E526D7
02F5075AE2F60EBD902E93FB50C40ED310F3E4D00E7FA08010DCC22A2D41725E
1305C9FE2F7AF467928E7735B5BFFBB02DFF1E39A280802992F24395860191C2
5AE7E3B8505AE859679BC4D389E37807BA659D2A001F031AD20A84B4C79D2ACD
31AD6427F2D43C6093E54F526F4A602571A49205449D11A95D72481452> |-
/R <1C60D8A8C9B6D5A02F5320E8A3D49239885025A6B60462DA1F01EFEEEEB0
F0275130E12464DF18C7BF1C3EA83C167501CBB0DB85BAFB90649D79D9C04763
C14CD70012922CBE9E0B07EED1BBC557F2D1FB67C390CA93E8F1CED714A42B5D
099BD325B1E0B39D7814B18BD322640D717480EA3F523AF562DB872D6D230FFA
B0583842C7B2163911BF785A3A714B6B39D9E738E576909E32BE551CCDF51874
08DA73ACE42E54CB6B0029180A09AE135F5CEEBAD1069779178BC01A51C24DCF
35C045426EF058F37FB0A9433CEA2C47EACEF69280CEBFC2D0943DFBEAC0B918
495FE6E23A29C977410F5CD0E898B9B02A9876099C32876D20AA84EDCB4675D6
A286B3170DC2B69A5B537488C01652FBA30E28D2D326FE839119> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUF+CMMI8 /Encoding get
dup 22 /mu put
dup 68 /D put
dup 76 /L put
dup 82 /R put
pop
%ADOEndSubsetFont
/IDENUF+CMMI8*1 
[11{/.notdef}rp /alpha /beta 9{/.notdef}rp /mu 5{/.notdef}rp /tau 39{/.notdef}rp 
/D 7{/.notdef}rp /L /.notdef /N 2{/.notdef}rp /Q /R 
14{/.notdef}rp /a /b 7{/.notdef}rp /j 6{/.notdef}rp /q 142{/.notdef}rp]
IDENUF+CMMI8 nf
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
312.332 304.656 mo
(Q)sh
IDENUH+CMMI6*1 [5.58343 0 0 -5.58343 0 0 ]msf
318.609 305.889 mo
(N)sh
323.989 307.795 mo
(D)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
310.203 314.857 mo
(\013\014)
[5.04398 0 ]xsh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
331.274 311.718 mo
(\()sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
335.534 311.718 mo
(K)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
345.622 306.45 mo
(j)sh
344.838 314.857 mo
(ab)
[4.14722 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
352.796 311.718 mo
(P)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
359.857 313.399 mo
(R)sh
IDENUC+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
368.824 311.718 mo
( )sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
380.033 311.718 mo
(K)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
390.121 306.45 mo
(j)sh
389.336 314.856 mo
(ba)
[3.36258 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
397.294 311.717 mo
(P)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
404.356 313.399 mo
(L)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
410.185 311.717 mo
(\))sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
414.444 311.717 mo
(C\015)
[8.63071 0 ]xsh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
428.791 313.399 mo
(\026)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
254.495 339.627 mo
(q)sh
IDENUC+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
262.79 339.627 mo
(6)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
262.79 339.627 mo
(=)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
274.447 339.627 mo
(q)sh
IDENUI+CMSY8*1 [7.44458 0 0 -7.44458 0 0 ]msf
279.715 335.592 mo
(0)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
285.319 339.627 mo
(:)sh
IDENUC+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
291.484 339.627 mo
( )sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
300.115 339.627 mo
(i\025)
[3.69888 0 ]xsh
IDENUI+CMSY8*1 [7.44458 0 0 -7.44458 0 0 ]msf
310.203 332.678 mo
(0)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
312.333 332.678 mo
(D)sh
IDENUH+CMMI6*1 [5.58343 0 0 -5.58343 0 0 ]msf
318.834 333.91 mo
(N)sh
324.214 335.817 mo
(D)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
310.203 342.766 mo
(\013\014)
[5.04401 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
331.5 339.627 mo
(K)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
341.587 334.359 mo
(j)sh
340.803 342.766 mo
(ab)
[4.14722 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
348.874 339.627 mo
(P)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
355.935 341.308 mo
(\034)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
360.755 339.627 mo
(C\015)
[8.63071 0 ]xsh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
375.102 341.308 mo
(\026)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
130.191 343.55 mo
(q)sh
IDENUI+CMSY8*1 [7.44458 0 0 -7.44458 0 0 ]msf
135.458 339.515 mo
(0)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
138.037 343.55 mo
(;b;\014)
[8.51823 4.59561 8.63057 0 ]xsh
130.863 304.655 mo
(q;a;\013)
[5.26804 8.51822 5.71655 8.51816 0 ]xsh
194.865 311.157 mo
(Q)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
203.496 305.777 mo
(\026)sh
203.496 314.183 mo
(N)sh
IDENUH+CMMI6*1 [5.58343 0 0 -5.58343 0 0 ]msf
209.773 315.416 mo
(D)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
216.498 311.157 mo
(;j)
[8.63057 0 ]xsh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
445.605 324.72 mo
(\(B.2\))
[4.2594 7.73401 3.02615 5.49231 0 ]xsh
195.255 386.07 mo
195.255 385.401 194.711 384.856 194.04 384.856 cv
193.37 384.856 192.826 385.401 192.826 386.07 cv
192.826 386.742 193.37 387.285 194.04 387.285 cv
194.711 387.285 195.255 386.742 195.255 386.07 cv
f
163.216 414.094 mo
194.04 386.07 li
@
180.909 398.009 mo
174.689 400.331 li
178.006 403.981 li
180.909 398.009 li
f
194.04 386.07 mo
231.402 386.07 li
@
215.804 386.07 mo
209.638 383.605 li
209.638 388.536 li
215.804 386.07 li
f
194.04 386.07 mo
192.084 387.448 188.972 387.774 185.504 384.622 cv
180.082 379.693 186.366 372.782 189.476 375.61 cv
192.586 378.436 186.303 385.35 179.34 379.02 cv
172.377 372.69 178.66 365.776 181.77 368.604 cv
184.88 371.432 178.597 378.344 171.633 372.014 cv
164.671 365.684 170.954 358.773 174.064 361.598 cv
177.174 364.427 170.891 371.338 165.469 366.409 cv
162.001 363.257 162.031 360.126 163.216 358.049 cv
@
IDENUC+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
252.589 388.61 mo
( )sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
261.22 388.61 mo
(2)sh
%ADOBeginSubsetFont: LLIAAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUD+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B747CAE32B2BADC0931BF233C2BC9ABDB24FE1095AB9AD27A3
039481B2ECC8EA6B918FCEC98B2FC68C4F15DE1E28D58E2C690FEAB967411DA0
2119410FDFCFA89820912CE088E4D2122E5465580F58EE01A16F39110BF27A85
C4EA3E888EBF1B237FAACB9208E99F4AA6C5FC3B8C3466FB0E43D9167D0180F2
53B4BFF9B7C17C8F9ED77A4788E0BF30BC13F75F9A9BAB5EB5B8ACD24601E04D
31B4A542D95A11EE8EB942DCC7A0280C28F9ED4BC2AD161178AC8B94A2F6AF49
4C911F731CCB1F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUD+CMMI12 /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
/IDENUD+CMMI12*1 
[11{/.notdef}rp /alpha /beta /gamma /delta 6{/.notdef}rp /lambda 37{/.notdef}rp 
/comma 7{/.notdef}rp /C 7{/.notdef}rp /K 4{/.notdef}rp /P /Q 
15{/.notdef}rp /a /b 4{/.notdef}rp /g /.notdef /i /j 
6{/.notdef}rp /q 142{/.notdef}rp]
IDENUD+CMMI12 nf
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
266.712 388.61 mo
(i)sh
271.532 381.101 mo
(g)sh
%ADOBeginSubsetFont: LLIBAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUF+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B750045F3746ED5BB3CEDC4DABE87B9B58254604A27D6B9E23
4A8853B004113152F59EC4ED78DDE7A2E6F973C3CFB5A1A00760D0A12A7086E9
D04062D64B99A776BB47E86A009AFE82E7A1CD31C9664389D1E2788430A11A4E
B90204B27D484A8CC4389CCAA5D07FA7B267106CEF5C5D1A5B9EF719432FE912
C170A9870E9B903D0A4831231C35F3FA05E2E6D41F63BDA51F228612CE8D1557
E8FF2B93> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUF+CMMI8 /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/IDENUF+CMMI8*1 
[11{/.notdef}rp /alpha /beta 9{/.notdef}rp /mu 5{/.notdef}rp /tau 39{/.notdef}rp 
/D 7{/.notdef}rp /L /.notdef /N 2{/.notdef}rp /Q /R 
14{/.notdef}rp /a /b 7{/.notdef}rp /j 6{/.notdef}rp /q /.notdef 
/s 140{/.notdef}rp]
IDENUF+CMMI8 nf
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
276.8 382.782 mo
(s)sh
271.619 386.038 mo
281.035 386.038 li
281.035 385.59 li
271.619 385.59 li
cp
f
%ADOBeginSubsetFont: NQPBAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUE+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Lambda <1C60D8A8C9B65A72D7249B3889FFBB5A9AB9943A15EDD9BD7911F43
1B83DB6ACE1735616267303870D4E844C308A1DA61F1A62DEABE1DFAB5541589
341FFD43A3A65B050A51276BAB0E74C46A403575BF3362CD0E1E7C36E176A98B
8C8A2821A0A2CC9D97926A68D7F28C9C6402DB0626780FCD3A299A957AEE5622
4B89DD6660D61C03413D44FEA6FDB7944CBA2B340D8844826859FFCA3E496565
EF87FE1BB991D3140EE821484A52813FCB067BF3782E9668E> |-
/three <1C60D8A8C9B752ABCAAA2553B55F086D1BB58BB32453103A8E6B1FA2
DBDACBE050C48980396DC5ACE2C287ED03971640573BE0208377E56C3C4ED937
B36C95E2F32624AC435B310C6F4355C4117979B156D6CCE3A60ABD1942231ED6
604ECF92CC6EC70A747880800FD5DF0A89C382F8F0F1AFF89650D8A8B7527345
3849878370F47D811AB6FDEDC7EC8C471A34C93185F3EBC8C12B9D9DB8C1C393
3FE33724E01B6FA30C526152E3BAE4A818> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUE+CMR12 /Encoding get
dup 3 /Lambda put
dup 51 /three put
pop
%ADOEndSubsetFont
/IDENUE+CMR12*1 
[3{/.notdef}rp /Lambda 36{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp 
/period 2{/.notdef}rp /one /two /three 6{/.notdef}rp /colon 2{/.notdef}rp 
/equal 4{/.notdef}rp /B 189{/.notdef}rp]
IDENUE+CMR12 nf
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
272.428 396.232 mo
(\003)sh
%ADOBeginSubsetFont: LLIAAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUD+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mu <1C60D8A8C9B7CEAE09C95C7D671BDB7A00D6066DD72F05A445B16DFF470
D955EBEF4CABBC29886504C0F82C5DD6D2433D7731827CD330A39FDB639CCB87
5D1F0D6D1E5231C2EFFDA1CE832DDF6019A77D032ECA43A1341120B8377319B7
2030F1B25943BAE2ED4A2428E73CB6809190CB8B96CB5FA873B75B7B152E54E9
782187992A72B1C1A3C693E96AC9701497E728FF7A6FF215D03FDD315F2B520F
F04945D480FE1332E5D1CBFA0DE96A6602E88B2525411BF9B82D9413F1A8823A
AFD00826974D33F7C53D326554D2206E1844D450C010B2807B003C89981A4833
5B01E941ECD> |-
/slash <1C60D8A8C9B752AB47E44573D7913AF39025896879091CA650E38EBD
380A0BB40FD4E12F5BF9BAAC6D121E7D007CA3AE5B7E99618A1DFCCD7AF05850
6E47DB90D668879256CD> |-
/A <1C60D8A8C9B613326598F765816E3D4E3BC647488EF6DDF94AECFE80C2CB
A1A1FD90A1093D51CC17B674152AE4EE3CA4F100E959651950A7BEC61DCA771C
606977ACD48093DF6697DAD1740870F186B4194B05A3A48EE6874DCD69D57759
DDA1D64D8B5D3BDF199B9A9DE9CDD2E058DFF801B6EF13DBC3FEDC9276BA159D
680359E1C830466563714D25E8233166C138F1E1F32FFA56551AE19D445E22F3
DF74FD9852E6FA702003B0C033D9F05F2FAA3F484820F2110FB7A79C497D6886
5196FB68099104D474005FC7B7192927169FCEE370A564> |-
/k <1C60D8A8C9B7BEB1372108BA988B6AF88542CBF1AE7DDFFE1F15DBE89F06
DA295E7C8D32D97163E5EADF7D61ECC7CAEB7A670E925D02DE602A3FD1BCC072
457F4FEAF2500ACEDA981CC6163193372A2B9F4EA25530B1729EDAAEB6B1B722
D11C9011780EB6DB91AD1F13A74DF6A78E0D5B3507E2B6BA515A6662D14571EB
EC180D6C1378DB9313C0795236F7388ECA0F7F2F5458E873592639BB6E7279BE
9E3C856DAF9B9AB9552B5EB896083A3505AB886A123B6035B6CB836011F059B9
E66D837F9A15B94610283A88F7BC4E4A3CC136F86DDFC9E4C439E86805FBCA9D
C6717ED6D367467451D6534A20529E0882AC4BEA2114F5661169D1469B9643AD
F629EC0C> |-
/u <1C60D8A8C9B7EE7C6FCF5EE5C87BD99AB5840782D9804BD4DF325EE81DBF
0CD269EFA86EFB8B298FB5B2219E59C7742BA158BC8C5C73C8C0A7B4441B08B3
7D9913F40C5FCB45A2AE14DB892B8D01B24DA58CD7036E80613241224875D51E
994BE56D37D79CE981EF5543872E0D65D1AEA8154AC3C4F783E09F2AF5BDF489
F7AE78E247275B01914062BF4070A4CDD139B3087F08C9DEC49A4E1FD556F4C6
B36427777CAD454F27B50528EE7F86C2E1E39FB921BED4A6D606CF34F4EB28EF
EB7589640052C243DF879811CEC9EF8DF9936D57EDE85520F4D31137FDFD5E27
D21D2A77152EF31FC50305DD6E19A643> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUD+CMMI12 /Encoding get
dup 22 /mu put
dup 61 /slash put
dup 65 /A put
dup 107 /k put
dup 117 /u put
pop
%ADOEndSubsetFont
/IDENUD+CMMI12*1 
[11{/.notdef}rp /alpha /beta /gamma /delta 6{/.notdef}rp /lambda /mu 
36{/.notdef}rp /comma /.notdef /slash 3{/.notdef}rp /A /.notdef /C 
7{/.notdef}rp /K 4{/.notdef}rp /P /Q 15{/.notdef}rp /a /b 
4{/.notdef}rp /g /.notdef /i /j /k 5{/.notdef}rp /q 
3{/.notdef}rp /u 138{/.notdef}rp]
IDENUD+CMMI12 nf
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
282.067 388.609 mo
(K)sh
%ADOBeginSubsetFont: LLIBAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUF+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B845C87883D105C3F24E2FD53DB6D616962DA6D0E35145
27BFAEEC13279793C670D1FA00ABD74C427410B2CEBEF7C2F82530323260C810
4E5ABF6DA4FE4E68342C6C> |-
/A <1C60D8A8C9B6CE042A9AE411334F3274F3B379CCBDF9C5D1442743F63C1D
4FE29C7B240855DCAA1349ED95AF87507D4BD8411FE121C8461FADE8306C0216
0D2A3813256A0CCFAB68BE653AC7F1A3470B6028E03D42D1F9A2FDFC30751FF1
4BF0015DF25147B257535A83428614B7148BCDD58FABEA8CB236EE8DA27804EB
E8555B545485D83A9D8EFA44564D1334FE5DF75EEC126857B563D7102C271889
FA4B26BFC7FD173769A39165E2C9E484F4A30ECBEFFDE5246DA9AFF704DD36E5
063948455DC1AB6FA0> |-
/U <1C60D8A8C9B60355F6C009FE36ED9263B39DD0C42070F1013B6AD0A1982D
B3B9A528772ACB72002E702ACCFE7301151A4C6BC71187CA9947FF5C91534D7D
206BFB0BF86AFF62CFCD2D1813451C9EED766DC1784C3153854BA7626FDC94F4
7AEC269E5CFCC4EFFE7D5D217F6FFFC7516FC0535DE320DB35904D3E97900590
C58E93EC8249164B4211C6C59B77B0B548DC5937AA27C8C7E3E40D44F80EA2C1
3366834CB688C00C9D3543C96F43FC5C7C6D60BD622F39350D13CD590CD30A77
63E22499C68C0872240041C5589AE11E2E99F834DFA166DE00E0C3D2C2BA70BB
14D2B3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUF+CMMI8 /Encoding get
dup 59 /comma put
dup 65 /A put
dup 85 /U put
pop
%ADOEndSubsetFont
/IDENUF+CMMI8*1 
[11{/.notdef}rp /alpha /beta 9{/.notdef}rp /mu 5{/.notdef}rp /tau 30{/.notdef}rp 
/comma 5{/.notdef}rp /A 2{/.notdef}rp /D 7{/.notdef}rp /L /.notdef 
/N 2{/.notdef}rp /Q /R 2{/.notdef}rp /U 11{/.notdef}rp /a 
/b 7{/.notdef}rp /j 6{/.notdef}rp /q /.notdef /s 140{/.notdef}rp]
IDENUF+CMMI8 nf
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
291.37 390.291 mo
(N)sh
IDENUH+CMMI6*1 [5.58343 0 0 -5.58343 0 0 ]msf
297.647 391.524 mo
(D)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
303.812 390.291 mo
(;A)
[2.24173 0 ]xsh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
312.443 388.609 mo
(\()sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
317.039 388.05 mo
(=)sh
316.703 388.609 mo
(k\015)
[6.05252 0 ]xsh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
328.471 390.291 mo
(\026)sh
IDENUC+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
336.094 388.609 mo
( )sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
347.302 388.609 mo
(k)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
353.019 390.291 mo
(\026)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
358.174 388.609 mo
(\)\()
[4.2594 0 ]xsh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
366.693 388.609 mo
(\025)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
373.082 384.574 mo
(U)sh
373.082 391.412 mo
(L)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
379.696 388.609 mo
(P)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
386.757 390.291 mo
(L)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
395.052 388.609 mo
(+)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
406.036 388.609 mo
(\025)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
412.425 384.574 mo
(U)sh
412.425 391.412 mo
(R)sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
419.038 388.609 mo
(P)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
426.1 390.291 mo
(R)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
432.6 388.609 mo
(\))sh
IDENUD+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
158.323 402.62 mo
(u)sh
129.404 375.159 mo
(k;A;\026)
[6.05252 8.51822 8.18234 8.6306 0 ]xsh
202.934 376.617 mo
(u)sh
%ADOBeginSubsetFont: XSAAAA+CMSY8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUI+CMSY8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asteriskmath <1C60D8A8C9B7883C619C01865C824C6DBCCEB46735E7E8B35
555CBBEBC685D7F0B8D6327BC536F4C38271A3D462520496A85F62851F3E93C4
6416ED3C0FD4121375C090F35352ED88792E076A3C3C11476D1C596BB597B2F8
12D1F8099693A0949A6E5186E7CD6D891FFA72473B496DBD6229F5CE1A6CBCB0
EC0423EA7FE7E4870400A501E4887445AEE14412B8BF3C72AC1C82F89E3BDB36
6222251C2B54C7632538C2CA73DE4C93E31BFDA9B84FA756F03881D911582D66
D269EB93AACE2C4589AC2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUI+CMSY8 /Encoding get
dup 3 /asteriskmath put
pop
%ADOEndSubsetFont
/IDENUI+CMSY8*1 
[3{/.notdef}rp /asteriskmath 44{/.notdef}rp /prime 207{/.notdef}rp]
IDENUI+CMSY8 nf
IDENUI+CMSY8*1 [7.44458 0 0 -7.44458 0 0 ]msf
209.211 372.581 mo
(\003)sh
IDENUF+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
209.211 379.419 mo
(N)sh
IDENUH+CMMI6*1 [5.58343 0 0 -5.58343 0 0 ]msf
215.488 380.652 mo
(D)sh
IDENUE+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
445.603 389.058 mo
(\(B.3\))
[4.2594 7.73398 3.02618 5.49231 0 ]xsh
161.349 414.166 mo
(.)sh
196.749 465.927 mo
196.749 465.261 196.208 464.719 195.541 464.719 cv
194.874 464.719 194.333 465.261 194.333 465.927 cv
194.333 466.595 194.874 467.135 195.541 467.135 cv
196.208 467.135 196.749 466.595 196.749 465.927 cv
f
1.1148 lw
164.884 493.798 mo
163.705 491.73 163.676 488.619 167.125 485.484 cv
172.517 480.582 178.767 487.456 175.673 490.268 cv
172.579 493.079 166.331 486.205 173.256 479.91 cv
180.182 473.614 186.43 480.488 183.338 483.301 cv
180.244 486.111 173.995 479.237 180.92 472.942 cv
187.846 466.646 194.095 473.52 191.001 476.333 cv
187.909 479.143 181.659 472.269 187.051 467.367 cv
190.501 464.232 193.595 464.559 195.541 465.927 cv
@
[4.12889 4.12889 ] 0 dsh
195.542 465.927 mo
232.702 465.927 li
@
[] 0 dsh
164.884 438.058 mo
166.83 436.688 169.925 436.363 173.374 439.498 cv
178.767 444.4 172.517 451.274 169.424 448.461 cv
166.331 445.651 172.579 438.777 179.506 445.072 cv
186.43 451.368 180.182 458.242 177.088 455.429 cv
173.995 452.619 180.244 445.745 187.17 452.04 cv
194.095 458.336 187.846 465.21 184.752 462.397 cv
181.659 459.586 187.909 452.713 193.301 457.612 cv
196.75 460.75 196.72 463.861 195.541 465.927 cv
@
%ADOBeginSubsetFont: FLEAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FLEAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /minus put
def
/FontBBox {0 0 694 303} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 -0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0416667 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUJ+CMSY10 /FLEAAA+CMSY10 findfont ct_VMDictPut
/IDENUJ+CMSY10*1 
[32{/.notdef}rp /minus 223{/.notdef}rp]
IDENUJ+CMSY10 nf
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
255.668 467.562 mo
( )sh
%ADOBeginSubsetFont: IRRAAA+CMR12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IRRAAA+CMR12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /four put
def
/FontBBox {0 -251 707 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [65] def
/StemSnapH [20 29] def
/StemSnapV [65 81] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/four <1C60D8A8C9B752AB372B1337EF5EBE50E7EE0D842EC88506CC8578384
EE51E179BB6AEA746475FEACAF798CD6C14693A1E8D3EE2FEF9BD6B47B43A239
7A24D50A7F1ABF1FEE4596D279C197E1CE889DDEB64563C8AC2828DDDB10F3D4
DE2B961879557873D221803B8BA674159AA7A2D6B96A7E476437ED08DA5B776B
B24078F6888> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUK+CMR12 /IRRAAA+CMR12 findfont ct_VMDictPut
/IDENUK+CMR12*1 
[52{/.notdef}rp /four 203{/.notdef}rp]
IDENUK+CMR12 nf
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
264.252 467.562 mo
(4)sh
%ADOBeginSubsetFont: RDHAAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RDHAAA+CMMI12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 20 /kappa put
dup 100 /d put
dup 103 /g put
dup 105 /i put
def
/FontBBox {0 -215 747 705} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/kappa <1C60D8A8C9B7E897949CFF5E8E09B14A26DF887F05625CB7A2DBED22
3C696B339575FBA4136A6311A95A953BB21E2A9CD81EE636504F0148BE0A5B38
500782BA40196FDC533F3D9B4171808F34272CD7792B1CD8EE515C36C3492D83
B8EF23556D458144A372B10CC6F8024D7F3ADB16083238896F3EACE8BBC4EBE1
BFE998D706A09634406488162CA2817DD85F4B2B04B8C086404C070D426705B4
594BB9B4643465FAB7743F6C6EC9623D391F3EC7A77F342959C7D3D16B8396F8
54A957CB6F6E22C671B8A2052361693E372CE4789CEB74AEEF6D2883A42E7164
9058909C9179917E3272092BB54E3F6CB73FAAD789CBC4D60196A08094A31DA8
75E23B12D16DD3356144CE04> |-
/d <1C60D8A8C9B7BF862426E956F4A5A7D477152C6D423D65D5DA1931775ED2
EC5D4A04F9A1D5B14C268D12DEDAA0E1A64418215E3FC9B9AA09B8E92E8F8D30
CDC41B64F88AED28375EDE94C5C3BE4567DC55BF004F2C447E4FC9A8C300A42D
8E48969C60F32C932F1D97B38BEC1DF1F97EC643D8DD33A1BA094986BE333FE4
6F41E295AF8338F9A4A53673EB5BF71B5838EFDDD7C1B3AF16476B968C5CF695
A53953A13DE05EDB501EAEF794AE4E12724310C9F2BF7CC1014EBBB6CB6CB2A3
F872182C34B724570BC98D76A81AFE586877F3D2DC52ABC12973E1> |-
/g <1C60D8A8C9B747CAE32B2BADC0931BF233C2BC9ABDB24FE1095AB9AD27A3
039481B2ECC8EA6B918FCEC98B2FC68C4F15DE1E28D58E2C690FEAB967411DA0
2119410FDFCFA89820912CE088E4D2122E5465580F58EE01A16F39110BF27A85
C4EA3E888EBF1B237FAACB9208E99F4AA6C5FC3B8C3466FB0E43D9167D0180F2
53B4BFF9B7C17C8F9ED77A4788E0BF30BC13F75F9A9BAB5EB5B8ACD24601E04D
31B4A542D95A11EE8EB942DCC7A0280C28F9ED4BC2AD161178AC8B94A2F6AF49
4C911F731CCB1F> |-
/i <1C60D8A8C9B81CBBCC9F41C887ED28EA22C57A3139C542E9573461192CE0
9AE9C0F5A2269B832BD975457B128F2140299471C776B699C2F729D70E5C6F43
2AECCA0017BCAAAB41A89ACD7B0E2EDEB169CC7565CC530B1F58FDCE083AE40C
648E25BE9E48F799563668AC4DF549AAC4C34CD843051CA602BBDFEE429DC446
B0F943E9E0586665C85BD97EAA1E95639F0357BDD3639B828AC9914813FDA5FD
07959EDCB69CE422D7198DCD018F3236B9E579FB73375A> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUL+CMMI12 /RDHAAA+CMMI12 findfont ct_VMDictPut
/IDENUL+CMMI12*1 
[20{/.notdef}rp /kappa 79{/.notdef}rp /d 2{/.notdef}rp /g /.notdef /i 
150{/.notdef}rp]
IDENUL+CMMI12 nf
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
269.714 467.562 mo
(ig)
[3.67883 0 ]xsh
%ADOBeginSubsetFont: CBIAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /CBIAAA+CMMI8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 83 /S put
dup 115 /s put
def
/FontBBox {0 -215 799 714} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/A <1C60D8A8C9B6CE042A9AE411334F3274F3B379CCBDF9C5D1442743F63C1D
4FE29C7B240855DCAA1349ED95AF87507D4BD8411FE121C8461FADE8306C0216
0D2A3813256A0CCFAB68BE653AC7F1A3470B6028E03D42D1F9A2FDFC30751FF1
4BF0015DF25147B257535A83428614B7148BCDD58FABEA8CB236EE8DA27804EB
E8555B545485D83A9D8EFA44564D1334FE5DF75EEC126857B563D7102C271889
FA4B26BFC7FD173769A39165E2C9E484F4A30ECBEFFDE5246DA9AFF704DD36E5
063948455DC1AB6FA0> |-
/B <1C60D8A8C9B6D4D2D01160D4E92E02B5EFF90BCCA0252F944ACF3AC2F0ED
DB7CDAA9CFEA8CC7E7B5F2070802A91C96A794B815697CD067EB55D8EF192EE7
3FEC53E8B79EB66296C826BD521F01543FCED77996F77BA2A09E49B8374A3F44
71EE9F94F587482E9EBE0E0952EE9FF5440F737E679B9F6AF536DAF1A8C6D016
80625C1E501FD599A6C6AD1C620B8D6C3ED10245319FC817A30A5B77C0AEEE16
18448788E2BC201B9A6BB5521B> |-
/C <1C60D8A8C9B6E80DE798539C04636E273392BC1FCA36EE3B3D9BDA597C5B
9E224C06BB4A4D18B7BD828A3E9F52B1E8E276FDE7CFD191803FC14CC0B519AF
58FD58B931FA356870D99B102AF018EF27080EBCBC7D5F7405A44CD1D1575BB3
698E03E1A6538E9B1359349B7CC7807225431BC9ED07CCDF3B1CB3464D5EFC45
086E41C9AA338FB7401054A0717D7883E61FED3603CC1F60D371DD624DEE2C48> |-
/S <1C60D8A8C9B67B16622634B63275053DA772F2C1C75434C0DC3B79FFABCA
A7F68BB7F56D09F3B176461CBBDA107DD304DCF3DF100EA3E78B6D6745FF63E9
8C3C609664364AF67D4753E8DC0FBE9021D970E81A3675A599CAE761F7B06F6D
2FFD4E06516175FA284F7F3F7B07C7E41177EBFAB600FF43A084F1A179C8057B
732D286285B6898D621B2167058603D5E2FEBA95F8D65D927A31993B89557787
E7920D58105E054DE084713CF2959C5EE906B7D2898DAE47C2A33E33080AA7F5
A6208ED19752BBDFCB0EA9BAADA25DAAB9510A111A8C1FFC0E5CCFB0FDE7257C
2FC5811C7CFEC05F4329F50D> |-
/s <1C60D8A8C9B750045F3746ED5BB3CEDC4DABE87B9B58254604A27D6B9E23
4A8853B004113152F59EC4ED78DDE7A2E6F973C3CFB5A1A00760D0A12A7086E9
D04062D64B99A776BB47E86A009AFE82E7A1CD31C9664389D1E2788430A11A4E
B90204B27D484A8CC4389CCAA5D07FA7B267106CEF5C5D1A5B9EF719432FE912
C170A9870E9B903D0A4831231C35F3FA05E2E6D41F63BDA51F228612CE8D1557
E8FF2B93> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUM+CMMI8 /CBIAAA+CMMI8 findfont ct_VMDictPut
/IDENUM+CMMI8*1 
[65{/.notdef}rp /A /B /C 15{/.notdef}rp /S 31{/.notdef}rp /s 
140{/.notdef}rp]
IDENUM+CMMI8 nf
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
278.633 469.234 mo
(s)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
282.757 467.562 mo
(d)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
288.443 463.548 mo
(ABC)
[5.90845 6.24255 0 ]xsh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
308.955 460.092 mo
(\024)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
315.198 461.765 mo
(S)sh
308.339 464.975 mo
321.606 464.975 li
321.606 464.529 li
308.339 464.529 li
cp
f
%ADOBeginSubsetFont: IRRAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUK+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Lambda <1C60D8A8C9B65A72D7249B3889FFBB5A9AB9943A15EDD9BD7911F43
1B83DB6ACE1735616267303870D4E844C308A1DA61F1A62DEABE1DFAB5541589
341FFD43A3A65B050A51276BAB0E74C46A403575BF3362CD0E1E7C36E176A98B
8C8A2821A0A2CC9D97926A68D7F28C9C6402DB0626780FCD3A299A957AEE5622
4B89DD6660D61C03413D44FEA6FDB7944CBA2B340D8844826859FFCA3E496565
EF87FE1BB991D3140EE821484A52813FCB067BF3782E9668E> |-
/parenleft <1C60D8A8C9B73F59DC1736782E4C1C19EDD64255E2393C5024B2
8DF3DAD1F658B414FFC7F6340C09154655276EBE3A864FAA5F25254ADD1D66AD
32F6F0ED72B2779D8B9CBC436F290A3FD41D2FEAF5BB166225967C60AC032644
61C3B610DAE07B90E04CD1> |-
/parenright <1C60D8A8C9B73F59DC1736782E4C1C19F750FC29D76AE903C84
F39596182123C2F9BBABDCD183CD0A7F2DCF7F475747A3C66A218A2ACC372926
7893607CC6D4EBAC9D3F2D1F9916BC173F64DE0D89D4D55EAF7634E8836B2C24
5A5674692FCF9DAC6CD845FC5E88E> |-
/period <1C60D8A8C9B85D12B760F96B699981ADCB57A7D673D446BE57B8C9B
CADDF9A80034920FA8DD7ED00> |-
/B <1C60D8A8C9B628230B2400E451D7BEDBEB5988CEE1051B4AB6DFE34F7ED0
39B657DA21A0BEF19E3DDCB8799D6DB5392BC5EE694B8D27DB02E5D00987FE97
E3C9DDED241A83A75515A6F00799DDCEBF82CF91866CE2B0A5786D289BC8BC56
EE530B75EFE400436E3B9F796BA5C1D287AF58B8541DF4039A959B39B3866D06
941918675E6FC2470B324A07> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUK+CMR12 /Encoding get
dup 3 /Lambda put
dup 40 /parenleft put
dup 41 /parenright put
dup 46 /period put
dup 66 /B put
pop
%ADOEndSubsetFont
/IDENUK+CMR12*1 
[3{/.notdef}rp /Lambda 36{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 5{/.notdef}rp 
/four 13{/.notdef}rp /B 189{/.notdef}rp]
IDENUK+CMR12 nf
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
308.285 475.142 mo
(\003)sh
%ADOBeginSubsetFont: CBIAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUM+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mu <1C60D8A8C9B672D420A18B45CF9CD91BFFEF8A6FD990749ACB73A18C210
BFEA50BB50C0CD7B5E4E22B6BE0250959F787F0DC2DC8325858C079907763137
72969B7EDFF26CB692C2A5616F9A33E9EB334E3162A0EC7641412D2D5606C848
5F41190F19776986202E2E1E491EE887C2EE164B6CAB36370540634FEF3AB745
4EB0F6143CEB708F0D64BE8D41E8D0247494716DF468ED1E1AC3A3A1A6DC05F4
945FADCFCD2BB93A216FB5D5803DA0AD614B2BA28E0AE32AEA42F43ED4429A07
D3F308355862D63DDEC4ED2724D5450EDB700> |-
/nu <1C60D8A8C9B7B14CE5ABDDB89E1111CAB572241EE5A0C998B55C98A8B9A
13B0638A6E630D9FF208368DE9DFCB12E3A31742CD2412E6CFE554CBC6A59939
8618F1C375305E85425519C7548CEBB458BE3C59453DE6EEB18E50D59E5CAACE
8CE5D58CFC49051ED41551A6E787413C80472588504D47236209F26FA76D460C
FEECDE6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUM+CMMI8 /Encoding get
dup 22 /mu put
dup 23 /nu put
pop
%ADOEndSubsetFont
/IDENUM+CMMI8*1 
[22{/.notdef}rp /mu /nu 41{/.notdef}rp /A /B /C 15{/.notdef}rp 
/S 31{/.notdef}rp /s 140{/.notdef}rp]
IDENUM+CMMI8 nf
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
315.866 476.814 mo
(S)sh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
322.555 467.561 mo
(\(\()
[4.2363 0 ]xsh
%ADOBeginSubsetFont: RDHAAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUL+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mu <1C60D8A8C9B7CEAE09C95C7D671BDB7A00D6066DD72F05A445B16DFF470
D955EBEF4CABBC29886504C0F82C5DD6D2433D7731827CD330A39FDB639CCB87
5D1F0D6D1E5231C2EFFDA1CE832DDF6019A77D032ECA43A1341120B8377319B7
2030F1B25943BAE2ED4A2428E73CB6809190CB8B96CB5FA873B75B7B152E54E9
782187992A72B1C1A3C693E96AC9701497E728FF7A6FF215D03FDD315F2B520F
F04945D480FE1332E5D1CBFA0DE96A6602E88B2525411BF9B82D9413F1A8823A
AFD00826974D33F7C53D326554D2206E1844D450C010B2807B003C89981A4833
5B01E941ECD> |-
/nu <1C60D8A8C9B758704CE17B3E96306C8B5A1F4AEA5F7B51335F5A7F694F1
217996654B79908047858672C15B20F8D17B300A5C9D8B474FF8F4170B875CDF
0E15A98980AB8BA738CBE362087216B8056EAD9DF76B2F3EB70BB0BDB0ABFCE3
6B87B31D2DB6086B4FE15C985939AF3294D7D5A36FC7C26740F> |-
/comma <1C60D8A8C9B85D12C7267AF0D2F66AB4AC257C1635F0E44E779EA91D
17D919E74DC693733D9D0583EFC67F7F717AA0A2AD3E3A69370B6D8115F79AC7
377BB34BFA4D6C876CD381E28CBE6ED5880877DF601260E0> |-
/B <1C60D8A8C9B61AE93D50A7822DAD6DFCE6BD753D67E768A57FC7E2E3FCA5
2752F2BFF68097D0D4CDAE49368B18101A7D25237C99197CE2F9D793F33DEDEA
75C636105E60994FBA1AFB838B8191AB38BA1534F6055EB9F2076CBBDB7A1E7D
6B2D056D555E742968D2F189F5462BF20E3CD8EE1C338EADD707C568154A0729
9DCF932879CC7A18467541513DFBB60D38D72C47DC2AC476014158702C824854
7F26DEFE84973D2E987AECDF536B44D6B2CB4938BC285C71590F62B9E4514DB0
B57DE7452357E14842E39F2D6203BE04> |-
/C <1C60D8A8C9B6317DF6DDBD86C7212DE4863F7C5C0964ACEE7B74B9276893
56AFC0B596838B466B1CF29A6F395E5A6DFA5042CC522453552400AF1554282E
5B87AD58E242FEC54F03FF853F059E2775B6F12C16E705E66681B10DF5E49EC8
4BD5766BFA6879F5EF07C28E739C1D7957BA018F5D3A91A81494E71DC8206045
F1373C117C389328FFDBBB729CFCA4FD1D81B29BDE> |-
/S <1C60D8A8C9B7C12ADCBB377749545B86EBBF23901708200F2DC2570D167F
EE1ABE95138FCBBE27C85CB85DB14BA7CED3D1A4D1CA18178EF5AD64DEFE23BD
733B86774D2079923A0EB65CC117EE09742DAC2834DE8ED884BD54CEAB86C93B
B61247AE42773370DEBE3F4B69A98BD8896415C4EEB5C396E543BCA111D7684B
1364DB1C3205496F94FE480075C156390BD25E0B95157D535D369F3B965A8D77
6A8DEFB9199C33094B1E36F05D80E38DD627BCD95ADB7021E4BB36EE5AB4129F
7260E7B7DBE6E132CC8D893E67309170010C7A4E85A46D9AFD40645CEF6787BC
EBF0D8172A0867> |-
/k <1C60D8A8C9B7BEB1372108BA988B6AF88542CBF1AE7DDFFE1F15DBE89F06
DA295E7C8D32D97163E5EADF7D61ECC7CAEB7A670E925D02DE602A3FD1BCC072
457F4FEAF2500ACEDA981CC6163193372A2B9F4EA25530B1729EDAAEB6B1B722
D11C9011780EB6DB91AD1F13A74DF6A78E0D5B3507E2B6BA515A6662D14571EB
EC180D6C1378DB9313C0795236F7388ECA0F7F2F5458E873592639BB6E7279BE
9E3C856DAF9B9AB9552B5EB896083A3505AB886A123B6035B6CB836011F059B9
E66D837F9A15B94610283A88F7BC4E4A3CC136F86DDFC9E4C439E86805FBCA9D
C6717ED6D367467451D6534A20529E0882AC4BEA2114F5661169D1469B9643AD
F629EC0C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUL+CMMI12 /Encoding get
dup 22 /mu put
dup 23 /nu put
dup 59 /comma put
dup 66 /B put
dup 67 /C put
dup 83 /S put
dup 107 /k put
pop
%ADOEndSubsetFont
/IDENUL+CMMI12*1 
[20{/.notdef}rp /kappa /.notdef /mu /nu 35{/.notdef}rp /comma 6{/.notdef}rp 
/B /C 15{/.notdef}rp /S 16{/.notdef}rp /d 2{/.notdef}rp /g 
/.notdef /i /.notdef /k 148{/.notdef}rp]
IDENUL+CMMI12 nf
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
331.028 467.561 mo
(k)sh
%ADOBeginSubsetFont: VXVBAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VXVBAA+CMR8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 56 /eight put
def
/FontBBox {0 -21 486 665} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A563
37D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86
BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1D
CB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7
F5FA2E61175441FDD6> |-
/eight <1C60D8A8C9B7883CBAA92BB64A311DA1354F5D68776F2608BEB81B80
294D73AA8C3FEDAFF58B4E60701097923423FBE4C36FE8DFBF6F2C385E130C47
988B6844413476018C63C43A8DDDFAE187820C43250C18C9D130DC31BAEF4A60
888F65AD1678646D1687B470D47BD523EE331174DDD0831E389327B2B700E7A6
A776152FCA4C02EC65B75F7B57D7BCCCD6954215D1EB0A1CFBA00896F64363A4
5CDA240697> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUN+CMR8 /VXVBAA+CMR8 findfont ct_VMDictPut
/IDENUN+CMR8*1 
[49{/.notdef}rp /one /two 5{/.notdef}rp /eight 199{/.notdef}rp]
IDENUN+CMR8 nf
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
336.713 469.233 mo
(1)sh
%ADOBeginSubsetFont: FLEAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUJ+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/periodcentered <1C60D8A8C9B85744184BF6DE7708B34A48D2A1BC0E3E86C
4A4A58F8CB4F3982EAABA33ABCF5BB62FA01F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUJ+CMSY10 /Encoding get
dup 1 /periodcentered put
pop
%ADOEndSubsetFont
/IDENUJ+CMSY10*1 
[/.notdef /periodcentered 30{/.notdef}rp /minus 223{/.notdef}rp]
IDENUJ+CMSY10 nf
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
343.513 467.561 mo
(\001)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
349.087 467.561 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
354.773 469.233 mo
(2)sh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
359.121 467.561 mo
(\))sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
363.357 467.561 mo
(g)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
368.596 469.233 mo
(\026\027)
[4.68219 0 ]xsh
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
380.637 467.561 mo
( )sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
391.673 467.561 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
397.359 469.233 mo
(2)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
401.26 469.233 mo
(\026)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
406.5 467.561 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
412.186 469.233 mo
(1)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
416.087 469.233 mo
(\027)sh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
420.88 467.561 mo
(\))sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
129.583 482.722 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
135.269 484.395 mo
(2)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
139.616 482.722 mo
(;C;\027)
[8.47206 8.02621 8.47205 0 ]xsh
128.915 457.751 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
134.6 459.423 mo
(1)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
138.947 457.751 mo
(;B;\026S)
[8.47206 8.80649 8.58382 34.1133 0 ]xsh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
206.282 453.738 mo
(A)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
205.612 460.538 mo
(8)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
212.636 457.751 mo
(;k)
[8.47206 0 ]xsh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
445.74 468.787 mo
(\(B.4\))
[4.23633 7.69205 3.00977 5.46252 0 ]xsh
165.813 437.462 mo
(.)sh
196.749 529.918 mo
196.749 529.25 196.208 528.71 195.541 528.71 cv
194.874 528.71 194.333 529.25 194.333 529.918 cv
194.333 530.584 194.874 531.126 195.541 531.126 cv
196.208 531.126 196.749 530.584 196.749 529.918 cv
f
164.884 557.787 mo
163.705 555.721 163.676 552.61 167.125 549.473 cv
172.517 544.571 178.767 551.445 175.673 554.257 cv
172.579 557.07 166.331 550.194 173.256 543.898 cv
180.182 537.603 186.43 544.479 183.338 547.289 cv
180.244 550.102 173.995 543.228 180.92 536.933 cv
187.846 530.637 194.095 537.511 191.001 540.322 cv
187.909 543.134 181.659 536.26 187.051 531.358 cv
190.501 528.223 193.595 528.548 195.541 529.918 cv
@
195.541 529.918 mo
198.638 525.272 li
201.734 529.918 li
@
201.734 529.918 mo
204.831 534.562 li
207.927 529.918 li
@
207.927 529.918 mo
211.024 525.272 li
214.12 529.918 li
@
214.12 529.918 mo
217.217 534.562 li
220.313 529.918 li
@
220.313 529.918 mo
223.41 525.272 li
226.507 529.918 li
@
226.507 529.918 mo
229.604 534.562 li
232.7 529.918 li
@
195.541 529.918 mo
198.638 534.562 li
201.734 529.918 li
@
201.734 529.918 mo
204.831 525.272 li
207.927 529.918 li
@
207.927 529.918 mo
211.024 534.562 li
214.12 529.918 li
@
214.12 529.918 mo
217.217 525.272 li
220.313 529.918 li
@
220.313 529.918 mo
223.41 534.562 li
226.507 529.918 li
@
226.507 529.918 mo
229.604 525.272 li
232.7 529.918 li
@
164.884 502.047 mo
166.83 500.676 169.925 500.352 173.374 503.487 cv
178.767 508.389 172.517 515.263 169.424 512.452 cv
166.331 509.64 172.579 502.766 179.506 509.061 cv
186.43 515.357 180.182 522.231 177.088 519.42 cv
173.995 516.608 180.244 509.734 187.17 516.029 cv
194.095 522.325 187.846 529.199 184.752 526.388 cv
181.659 523.575 187.909 516.701 193.301 521.603 cv
196.75 524.738 196.72 527.85 195.541 529.918 cv
@
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
253.772 508.475 mo
( )sh
%ADOBeginSubsetFont: IRRAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUK+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B752AB3751B7115F440B017A800C9966F9D6C8D899B69B53
5555547C6BA24B6E1F046DE16579F205857804134562B1E66D1B74F5C065BE47
58EAA51BE86F23919207272A8508C865B8FC972FA5EECD6D618D03C944A0B510
56C9A643AEE9E15B7819729DCB8546556AE1AA15DC7D1BB3C46B74A340814C18
94F0D8820D897F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUK+CMR12 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/IDENUK+CMR12*1 
[3{/.notdef}rp /Lambda 36{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 3{/.notdef}rp 
/two /.notdef /four 13{/.notdef}rp /B 189{/.notdef}rp]
IDENUK+CMR12 nf
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
262.356 508.475 mo
(2)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
267.819 508.475 mo
(ig)
[3.67883 0 ]xsh
%ADOBeginSubsetFont: CBIAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUM+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7D10355D136D0DADE5158433371BFB24B1EEAC55C843708ED
7631DE65FD5A4213D138297C3AE02E413993305D0DB4D03A1369B6FBB44AC933
DE0464D1DF77D05FFD17A86D45C937293D614C36683D117FB9A1B7912150E3D0
9824578188963B5DE3CAEC9D55573A3199548CBC65777465CAE53ABD8D1B467D
809949E19A42265483154A808D58861A8243A6D447DCD3F195643A01AB443B52
147068818E77B527F6397E672B724685DC71EC4048543FCD88FA2A9BBCBB3196
AC2AE49B0A65> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUM+CMMI8 /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
/IDENUM+CMMI8*1 
[22{/.notdef}rp /mu /nu 41{/.notdef}rp /A /B /C 15{/.notdef}rp 
/S /T 30{/.notdef}rp /s 140{/.notdef}rp]
IDENUM+CMMI8 nf
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
276.737 510.147 mo
(s)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
280.861 508.475 mo
(d)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
286.548 504.462 mo
(ABC)
[5.90845 6.24255 0 ]xsh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
307.059 500.895 mo
(\024)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
313.302 502.567 mo
(T)sh
306.419 505.95 mo
320.131 505.95 li
320.131 505.504 li
306.419 505.504 li
cp
f
%ADOBeginSubsetFont: IRRAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUK+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6EC3453F6145863BD3727D6A0863C71D59FC813989C24F
CD98311B732F6A8FCF177973035F5271F42F98EBFD01B1EECA8986C125D8A764
190C26002AB68C4BFE8E38ED199515C149B924611CAC04350BE9C56E03E7A> |-
/five <1C60D8A8C9B752ABCAAA254E5D87FCEAB6A0AE2B8052A7BEE91D3A65F
575EE4B3B66296C0FE52EA82CE011CF61C01B6A605CD47A5F6A10F9A4E21D792
57A513D084EB04BB5AC6A06F1C7B044EA4769F93193E4526D5AA704F93CDFB19
EC0E1FEFDBFECCA93D26919EE1DEA3E9D21B9BBE6473D9D0C84AFAE56833A7C6
A724DAE6294B8218D36689219603A3A1CC8F24F42576EEE325B8970F582A898E
AC65A50F6F13F284ADC24DFB12DA5162556FAFAA1E0644E0CE4F567272CAB0D6
0E2783CDCC2D13299> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUK+CMR12 /Encoding get
dup 43 /plus put
dup 53 /five put
pop
%ADOEndSubsetFont
/IDENUK+CMR12*1 
[3{/.notdef}rp /Lambda 36{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp 
/period 3{/.notdef}rp /two /.notdef /four /five 12{/.notdef}rp /B 
189{/.notdef}rp]
IDENUK+CMR12 nf
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
306.39 516.055 mo
(\003)sh
%ADOBeginSubsetFont: CBIAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUM+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/alpha <1C60D8A8C9B65F8A3BCC2799D8771214626480D93F2E60B123B79DF1
873D6D4F3E3BD4BF09F9CA39030894CCB3E132B12B4463E770FA334D21DCA5A3
01C2828A3DB6F0A0743D1C2A9F4DFD06ED887A7928575AB98D31B3765341326A
68FB75D891D4F329EA0927AF909DF180690FEEE1EE2D4CFF378930A641630372
259BE99E14604F28C2AA507EB5DAD6BB958FBA9A3270E557C136AC50B72D8DCA
7E7434E75F149F11A8DC61F088E2BD918F3A> |-
/beta <1C60D8A8C9B7C7F3A7A9FFDD799C701454A55EFF9DED64ED8161A74DA
2D0BB385D41E15884B7E26FD6B9A4865AA91474AC7854095C143F9EBE4AA9EA6
0CEE7DB7294E7CE951D9CDDDA6451859282AF7050841A37C5C3452A9915039A6
D12BD05425A88A3F357078FFAD9EA70C6D6EF3DB6E1C2FAABF53C4F3E9F9F2CD
28383133C2F6E2D4A54A78BF1B0AAF6819B7CD86D59B43F1EEB0371D2B778B86
10AF7C6F92F46286568923840A830E03D73F002C828435501DE28CDA37DCDBF8
7438DE53B3A464F02C07383C780B9D035804DC32195F2D2B4911AA670E052016
91C033FA89EF2B455FD78AD9E2886ADF577C8328186C50B16877C3DB47D29F15
C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUM+CMMI8 /Encoding get
dup 11 /alpha put
dup 12 /beta put
pop
%ADOEndSubsetFont
/IDENUM+CMMI8*1 
[11{/.notdef}rp /alpha /beta 9{/.notdef}rp /mu /nu 41{/.notdef}rp /A 
/B /C 15{/.notdef}rp /S /T 30{/.notdef}rp /s 140{/.notdef}rp]
IDENUM+CMMI8 nf
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
313.971 517.728 mo
(T)sh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
321.217 508.474 mo
(\()sh
%ADOBeginSubsetFont: RDHAAA+CMMI12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
IDENUL+CMMI12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/alpha <1C60D8A8C9B663CCDD515076914F6743DFBC3D2377E329AD0BAE0D04
239FB22305C715393AB17229DDDC1E8255E04FE0ED0F68AF872D35338AC36FA6
5EB33C8A34A3C3F165813FC297230F26AED61E71899549D52261D71D4032E098
FB9F945525C7482F9D647DFDA9816E2C70151535709000EDD55269B7DC48F098
E2C899DAA1C89460BEF1D70D70D8BC1C8DCA4B78E21C1BCAD0DE5A279737BEFB
F37B4C1136BB89FFF2CD071442> |-
/beta <1C60D8A8C9B7924C40F39E809CED4CA7DCE2AE6F860DEF7805C7A5DC2
B50D3013EB2F049031CFA68725E852B3AEE10213E7686C097E52440B302D8B45
8E9C52D3222F242D21A20CDC03EC879573130767EA4599E54FDAF9CBFC2EFB43
54803560EF32D2A9861E3E1A3BCB53F8E026FA077D4FAB0456D7A1CEB8AE6A03
85BE19971CCC6F86A4B16D9368313C4203DF0B794DAE3E08BD036594D0EDD1DC
945BBF026E7F7801BEF04610237704558DF330FCF5B3000E6CC20B0CAC4D8732
880FCEDFF9DEFEE03F51E191722B97E60450404B98ADC8F17C1416ABD99720EA
498B08D44B2E00B60D4CAC7FDB969DBC5FC0558397C46DD3F968A1ACE6A4E0C7
8F985F49284C313E265CF50912B16979D4F81C55A4F6EF6B8802CCF3B0372B8D
C68262693272057D139DDD523EE8331B26836325EFB4C4A4D0539378FEFF2F63
2A9E9996EDBDA9D6BE39CDBFC58026E5A99B400BB6CA35839807280620D012EC
414C29C1EFC49408E48C728749CA7536B019014C6D686FD61682731856107780
E1A27EA62482F6086DF0AA7ACAFEBDD3A5B8498237B99C295DF830E93769BE59
CE2FDF0846703A5F8> |-
/T <1C60D8A8C9B7FE5AA1438436217DB1AEB42CC5924428C28B08E6B64184F7
70CC6A28DED8B219DF50375A1316ED6D82E1146513B99C34E5835FC9765055FD
799AC966E53ED0AAF902DB82527220427D15AAE2F7F11716DEB84C6E50119C35
F62C1E418B09A8E6FADB9741F25BF2CA0526405A2D9E7F12C39FDAB7106D79CF
B4C876F9E3563485CBD1F7A7ABF442860313FA56927AC6A8FF3C22A0CAE0EDAB
E72F36EC774131C545A3366D3F524B735434EB35C9CC4C8632A76B5D825215E8
7A089989CCE290C2D07C> |-
/f <1C60D8A8C9B7594678CA9DB12B35A91C18651F38E7B023AC1B586FC2D671
BA1331F0BD06961D8300C845209FE0D0CC96F2B000E5552FB8297A99F4D0BF51
2D508620936B28596F27F8DB88E065F0D50A53BF42E332295A06DCEE89003122
1CF8DA75F72839B4FB149176BE6021ACD6D9167E86ADCBC6E6510E992F6B9572
8BF1ABFF509124EC9738171573EC44BEC7CB59DA73139595F08AC5567B8E0320
538C6FF01D0EF7CA9373EAEF7F63A0C4D7913314BC3DA5D37578E76E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IDENUL+CMMI12 /Encoding get
dup 11 /alpha put
dup 12 /beta put
dup 84 /T put
dup 102 /f put
pop
%ADOEndSubsetFont
/IDENUL+CMMI12*1 
[11{/.notdef}rp /alpha /beta 7{/.notdef}rp /kappa /.notdef /mu /nu 
35{/.notdef}rp /comma 6{/.notdef}rp /B /C 15{/.notdef}rp /S /T 
15{/.notdef}rp /d /.notdef /f /g /.notdef /i /.notdef 
/k 148{/.notdef}rp]
IDENUL+CMMI12 nf
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
325.454 508.474 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
331.139 510.147 mo
(1)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
335.04 510.147 mo
(\013)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
340.503 508.474 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
346.189 510.147 mo
(2)sh
%ADOBeginSubsetFont: SPVAAA+CMMI6 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SPVAAA+CMMI6 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI6.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /beta put
def
/FontBBox {0 -194 669 705} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [35] def
/StdVW [85] def
/StemSnapH [35 39] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/beta <1C60D8A8C9B62FDE79E45E0F04CA3146CA5E95661700592A853A9E542
FE03E9BC787C937E2A778CFEBDF00CBB5139E0618E1BAFBD6996CA78E63E8C85
484250828D4AF29C40A88C18882B7FCC4ED43AB22F1FD054C1DE9697F0E8D730
A1A1498ED74ED14A78A2AAF9FBB54656DD97B9D311C393B73632AE87DD9806A0
DE899DDE861062A37F40EF100A337DCA7E9119AD3AF4E1E97E4C14A6CD11D128
FEE3A479302C7FE35AED207D25947B69190579D94BA8D7E71981A6C6E0258277
16623CA6065DFF3E689F5F521664CF8BC3B018DF88C24A54BA51B6ADFB016935
4DE491EFBF067B2DA0C7CDF3CC2A64A24E64BBF45> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUO+CMMI6 /SPVAAA+CMMI6 findfont ct_VMDictPut
/IDENUO+CMMI6*1 
[12{/.notdef}rp /beta 243{/.notdef}rp]
IDENUO+CMMI6 nf
IDENUO+CMMI6*1 [5.55317 0 0 -5.55317 0 0 ]msf
350.09 511.485 mo
(\014)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
355.219 508.474 mo
(g)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
360.458 510.147 mo
(\026\027)
[4.68222 0 ]xsh
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
372.386 508.474 mo
( )sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
383.534 508.474 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
389.22 510.147 mo
(1)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
393.121 510.147 mo
(\027)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
397.915 508.474 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
403.601 510.147 mo
(2)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
407.502 510.147 mo
(\014)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
412.742 508.474 mo
(g)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
417.982 510.147 mo
(\013\026)
[5.01663 0 ]xsh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
283.425 528.095 mo
(+\()
[8.4725 0 ]xsh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
296.133 528.095 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
301.819 529.767 mo
(1)sh
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
308.619 528.095 mo
(\001)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
314.193 528.095 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
319.879 529.767 mo
(2)sh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
324.227 528.095 mo
(\))sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
328.464 528.095 mo
(g)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
333.702 529.767 mo
(\013\026)
[5.01666 0 ]xsh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
343.848 528.095 mo
(g)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
349.087 529.767 mo
(\014\027)
[4.79337 0 ]xsh
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
361.126 528.095 mo
( )sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
372.274 528.095 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
377.96 529.767 mo
(1)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
381.861 529.767 mo
(\013)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
387.436 528.095 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
393.121 529.767 mo
(2)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
397.022 529.767 mo
(\026)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
402.151 528.095 mo
(g)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
407.39 529.767 mo
(\014\027)
[4.79337 0 ]xsh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
283.425 546.601 mo
(+2)
[8.4725 0 ]xsh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
297.36 546.601 mo
(fg)
[6.57736 0 ]xsh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
309.176 548.273 mo
(\013\014)
[5.01666 0 ]xsh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
319.321 546.601 mo
(\(\()
[4.23633 0 ]xsh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
327.793 546.601 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
333.479 548.273 mo
(1)sh
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
340.279 546.601 mo
(\001)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
345.853 546.601 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
351.539 548.273 mo
(2)sh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
355.887 546.601 mo
(\))sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
360.123 546.601 mo
(g)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
365.363 548.273 mo
(\026\027)
[4.68219 0 ]xsh
IDENUJ+CMSY10*1 [11.1064 0 0 -11.1064 0 0 ]msf
377.403 546.601 mo
( )sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
388.439 546.601 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
394.125 548.273 mo
(2)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
398.026 548.273 mo
(\026)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
403.266 546.601 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
408.952 548.273 mo
(1)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
412.853 548.273 mo
(\027)sh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
417.647 546.601 mo
(\)\))
[4.23633 0 ]xsh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
129.582 546.712 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
135.268 548.385 mo
(2)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
139.615 546.712 mo
(;C;\027)
[8.47206 8.02621 8.47206 0 ]xsh
128.914 521.741 mo
(k)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
134.599 523.413 mo
(1)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
138.947 521.741 mo
(;B;\026)
[8.47206 8.80649 8.5838 0 ]xsh
198.588 519.957 mo
(T)sh
IDENUM+CMMI8*1 [7.40423 0 0 -7.40423 0 0 ]msf
206.504 515.944 mo
(A)sh
IDENUN+CMR8*1 [7.40423 0 0 -7.40423 0 0 ]msf
204.943 522.633 mo
(8)sh
IDENUL+CMMI12*1 [11.1064 0 0 -11.1064 0 0 ]msf
212.858 519.957 mo
(;k;\013\014)
[4.90492 6.01971 4.90492 7.02332 0 ]xsh
IDENUK+CMR12*1 [11.1064 0 0 -11.1064 0 0 ]msf
445.74 532.889 mo
(\(B.5\))
[4.23633 7.69208 3.00977 5.46252 0 ]xsh
163.027 557.861 mo
(.)sh
193.305 607.793 mo
193.305 607.124 192.761 606.579 192.09 606.579 cv
191.42 606.579 190.876 607.124 190.876 607.793 cv
190.876 608.465 191.42 609.008 192.09 609.008 cv
192.761 609.008 193.305 608.465 193.305 607.793 cv
f
1.12087 lw
161.266 635.817 mo
192.09 607.793 li
@
178.959 619.732 mo
172.739 622.056 li
176.056 625.704 li
178.959 619.732 li
f
192.09 607.793 mo
195.204 603.124 li
198.317 607.793 li
@
198.317 607.793 mo
201.431 612.465 li
204.544 607.793 li
@
204.544 607.793 mo
207.658 603.124 li
210.771 607.793 li
@
210.771 607.793 mo
213.885 612.465 li
216.998 607.793 li
@
216.998 607.793 mo
220.111 603.124 li
223.224 607.793 li
@
223.224 607.793 mo
226.338 612.465 li
229.452 607.793 li
@
192.09 607.793 mo
161.266 579.772 li
@
174.397 591.711 mo
177.3 597.683 li
180.617 594.033 li
174.397 591.711 li
f
%ADOBeginSubsetFont: CUFAAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /CUFAAA+CMMI12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /gamma put
dup 22 /mu put
dup 59 /comma put
dup 67 /C put
dup 80 /P put
dup 84 /T put
dup 86 /V put
dup 103 /g put
dup 105 /i put
dup 113 /q put
def
/FontBBox {0 -215 753 704} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/gamma <1C60D8A8C9B7A08609F0BE3386DB25AA3C40F69716938B3CD608B8F4
AC3CEB11F3463C0A39522D481E09FA2BAC303604566E11A733A443F6D4DAE2B4
D699CE4FC228D342E5BB9DFAF924011D955409F8F13B245291EF956CE9983875
91B378F72CC874BF1490A1739EFD80F9DEEFD53CE9050D7A6FBF75BC130439CB
3672C5F4D4464673665ADEF12BAB675322E2CA31AEF558DBE2ADB50892A3991F
71DB17AEF27E29640D3AD6B7A552698841A7258BDE94F0E078A9FB94964BB7> |-
/mu <1C60D8A8C9B7CEAE09C95C7D671BDB7A00D6066DD72F05A445B16DFF470
D955EBEF4CABBC29886504C0F82C5DD6D2433D7731827CD330A39FDB639CCB87
5D1F0D6D1E5231C2EFFDA1CE832DDF6019A77D032ECA43A1341120B8377319B7
2030F1B25943BAE2ED4A2428E73CB6809190CB8B96CB5FA873B75B7B152E54E9
782187992A72B1C1A3C693E96AC9701497E728FF7A6FF215D03FDD315F2B520F
F04945D480FE1332E5D1CBFA0DE96A6602E88B2525411BF9B82D9413F1A8823A
AFD00826974D33F7C53D326554D2206E1844D450C010B2807B003C89981A4833
5B01E941ECD> |-
/comma <1C60D8A8C9B85D12C7267AF0D2F66AB4AC257C1635F0E44E779EA91D
17D919E74DC693733D9D0583EFC67F7F717AA0A2AD3E3A69370B6D8115F79AC7
377BB34BFA4D6C876CD381E28CBE6ED5880877DF601260E0> |-
/C <1C60D8A8C9B6317DF6DDBD86C7212DE4863F7C5C0964ACEE7B74B9276893
56AFC0B596838B466B1CF29A6F395E5A6DFA5042CC522453552400AF1554282E
5B87AD58E242FEC54F03FF853F059E2775B6F12C16E705E66681B10DF5E49EC8
4BD5766BFA6879F5EF07C28E739C1D7957BA018F5D3A91A81494E71DC8206045
F1373C117C389328FFDBBB729CFCA4FD1D81B29BDE> |-
/P <1C60D8A8C9B66A6BD6F90888768F67EC15C77D9BB35B63C2D1057A70C423
B7B04CED65B25A2BA2E3035CF8B7A4352B61B93B045F9591F90BDC6EA846560E
BDA4B49DE9CFFE64713EAB618DC2D4C304F9B6E1D331A8E26197DBA96805DF67
AF5DA921ACED4BE4C351291FDAC855042EEF34159F43E61A7450302F234FE13B
7493E51280A4B5C7BBAE5AB5BD6C554CB6AA29C4834D8B9BAF45180CC1E2F2C6
147E4AC7261CFF8A5850EFC6> |-
/T <1C60D8A8C9B7FE5AA1438436217DB1AEB42CC5924428C28B08E6B64184F7
70CC6A28DED8B219DF50375A1316ED6D82E1146513B99C34E5835FC9765055FD
799AC966E53ED0AAF902DB82527220427D15AAE2F7F11716DEB84C6E50119C35
F62C1E418B09A8E6FADB9741F25BF2CA0526405A2D9E7F12C39FDAB7106D79CF
B4C876F9E3563485CBD1F7A7ABF442860313FA56927AC6A8FF3C22A0CAE0EDAB
E72F36EC774131C545A3366D3F524B735434EB35C9CC4C8632A76B5D825215E8
7A089989CCE290C2D07C> |-
/V <1C60D8A8C9B7E1F86555EA948B3923991EC2D773D3CA399D4DDD18C34098
4D23A877D0E6DACF5354C0BBF0194A98CBB4C7BEC53C0A5BD10249DC42DBC59F
AF1E36806BA66CD6C8AFD8C0519FBFE286251CAD47ECB01A39BAE5CFC439CC74
AB1271BBB5E4CF7EDF927F71AD5884B15F50391386DAA5AED7382EF043D5AB77
75D11E7DC199AEA81E798DECF3CF208AE4739F0D1240CE1577D1E6DAFB1D130A
BC95660F7D8E660AE4243AC55179D6733D289FFC9C170431FF> |-
/g <1C60D8A8C9B747CAE32B2BADC0931BF233C2BC9ABDB24FE1095AB9AD27A3
039481B2ECC8EA6B918FCEC98B2FC68C4F15DE1E28D58E2C690FEAB967411DA0
2119410FDFCFA89820912CE088E4D2122E5465580F58EE01A16F39110BF27A85
C4EA3E888EBF1B237FAACB9208E99F4AA6C5FC3B8C3466FB0E43D9167D0180F2
53B4BFF9B7C17C8F9ED77A4788E0BF30BC13F75F9A9BAB5EB5B8ACD24601E04D
31B4A542D95A11EE8EB942DCC7A0280C28F9ED4BC2AD161178AC8B94A2F6AF49
4C911F731CCB1F> |-
/i <1C60D8A8C9B81CBBCC9F41C887ED28EA22C57A3139C542E9573461192CE0
9AE9C0F5A2269B832BD975457B128F2140299471C776B699C2F729D70E5C6F43
2AECCA0017BCAAAB41A89ACD7B0E2EDEB169CC7565CC530B1F58FDCE083AE40C
648E25BE9E48F799563668AC4DF549AAC4C34CD843051CA602BBDFEE429DC446
B0F943E9E0586665C85BD97EAA1E95639F0357BDD3639B828AC9914813FDA5FD
07959EDCB69CE422D7198DCD018F3236B9E579FB73375A> |-
/q <1C60D8A8C9B7693F7E4502F380845660BCAE31E0A4910EF280982D2336A5
5CD01E1E849E30A30413AE349B804B80E52B42076FB12888B617554E0D194A94
06C6D5ACC1B364E716CF14043C791180DF2EA4CD33ABBFBC5D2E5498F733578E
EBD39BAA30C0938F1F3F82054FBBBEE4F4045CE5D9FB049102527F902979CB53
A38578D001BD78CF390499D6BA88C57870BBBD7B350E047AA9C5FB8EC684D993
3D175F30D9928BA331066F378305A252FCF1A31A1C46A92D4DEC4611445827> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUP+CMMI12 /CUFAAA+CMMI12 findfont ct_VMDictPut
/IDENUP+CMMI12*1 
[13{/.notdef}rp /gamma 8{/.notdef}rp /mu 36{/.notdef}rp /comma 7{/.notdef}rp /C 
12{/.notdef}rp /P 3{/.notdef}rp /T /.notdef /V 16{/.notdef}rp /g 
/.notdef /i 7{/.notdef}rp /q 142{/.notdef}rp]
IDENUP+CMMI12 nf
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
156.821 627.819 mo
(q)sh
%ADOBeginSubsetFont: XFAAAA+CMR12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /XFAAAA+CMR12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 22 /macron put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 46 /period put
dup 54 /six put
dup 58 /colon put
dup 66 /B put
def
/FontBBox {0 -251 707 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [65] def
/StemSnapH [20 29] def
/StemSnapV [65 81] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/macron <1C60D8A8C9B752AB443E938014AD72B2F7FA6CBFFDB96ACA4E921B5
FE098> |-
/parenleft <1C60D8A8C9B73F59DC1736782E4C1C19EDD64255E2393C5024B2
8DF3DAD1F658B414FFC7F6340C09154655276EBE3A864FAA5F25254ADD1D66AD
32F6F0ED72B2779D8B9CBC436F290A3FD41D2FEAF5BB166225967C60AC032644
61C3B610DAE07B90E04CD1> |-
/parenright <1C60D8A8C9B73F59DC1736782E4C1C19F750FC29D76AE903C84
F39596182123C2F9BBABDCD183CD0A7F2DCF7F475747A3C66A218A2ACC372926
7893607CC6D4EBAC9D3F2D1F9916BC173F64DE0D89D4D55EAF7634E8836B2C24
5A5674692FCF9DAC6CD845FC5E88E> |-
/plus <1C60D8A8C9B6EC3453F6145863BD3727D6A0863C71D59FC813989C24F
CD98311B732F6A8FCF177973035F5271F42F98EBFD01B1EECA8986C125D8A764
190C26002AB68C4BFE8E38ED199515C149B924611CAC04350BE9C56E03E7A> |-
/period <1C60D8A8C9B85D12B760F96B699981ADCB57A7D673D446BE57B8C9B
CADDF9A80034920FA8DD7ED00> |-
/six <1C60D8A8C9B752ABCAAA2541FEC0FBA7ADC419C93DEA2D2BC334E3FD73
85D9FBC525C8DBFD8589180774EE915ED9218E721B2C38BED311281AF71A9604
39C391CAA3CA0CF54C1E6ADEF5F198E64A815D08679CBC939EC73944B6195C70
A72A0CB539D62D60B95C6FC8BA2CCA97DA773DBABFE7E84F298426A359F22E3E
FDD2F103A247B4DD64636648AABC364866FE3207DB6002E295362E81EB91BAE1
391636> |-
/colon <1C60D8A8C9B85D12B760F97E35CE56A4095E9F7AA1A00656E95C0DD5
2F4E15A0283B28A01742D3598E509B6264639DC3B168E3F06534E138A11F64F5
2DCAA93297CC1E84D3> |-
/B <1C60D8A8C9B628230B2400E451D7BEDBEB5988CEE1051B4AB6DFE34F7ED0
39B657DA21A0BEF19E3DDCB8799D6DB5392BC5EE694B8D27DB02E5D00987FE97
E3C9DDED241A83A75515A6F00799DDCEBF82CF91866CE2B0A5786D289BC8BC56
EE530B75EFE400436E3B9F796BA5C1D287AF58B8541DF4039A959B39B3866D06
941918675E6FC2470B324A07> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUQ+CMR12 /XFAAAA+CMR12 findfont ct_VMDictPut
/IDENUQ+CMR12*1 
[22{/.notdef}rp /macron 17{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp 
/period 7{/.notdef}rp /six 3{/.notdef}rp /colon 7{/.notdef}rp /B 189{/.notdef}rp]
IDENUQ+CMR12 nf
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
160.296 591.391 mo
(\026)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
159.399 591.391 mo
(q)sh
190.784 597.668 mo
(V)sh
%ADOBeginSubsetFont: GLAAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GLAAAA+CMMI8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 22 /mu put
dup 61 /slash put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 82 /R put
dup 85 /U put
dup 115 /s put
def
/FontBBox {0 -250 1088 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/mu <1C60D8A8C9B672D420A18B45CF9CD91BFFEF8A6FD990749ACB73A18C210
BFEA50BB50C0CD7B5E4E22B6BE0250959F787F0DC2DC8325858C079907763137
72969B7EDFF26CB692C2A5616F9A33E9EB334E3162A0EC7641412D2D5606C848
5F41190F19776986202E2E1E491EE887C2EE164B6CAB36370540634FEF3AB745
4EB0F6143CEB708F0D64BE8D41E8D0247494716DF468ED1E1AC3A3A1A6DC05F4
945FADCFCD2BB93A216FB5D5803DA0AD614B2BA28E0AE32AEA42F43ED4429A07
D3F308355862D63DDEC4ED2724D5450EDB700> |-
/slash <1C60D8A8C9B7883C37D0390FA268C00AA6E97DC38CEE127D52926793
076D8BD8C99F8C962F92C6BE23785C233A1AF987223E7CAAECD01BCB4653B763
A7F816DCDFEEB26CDA48> |-
/A <1C60D8A8C9B6CE042A9AE411334F3274F3B379CCBDF9C5D1442743F63C1D
4FE29C7B240855DCAA1349ED95AF87507D4BD8411FE121C8461FADE8306C0216
0D2A3813256A0CCFAB68BE653AC7F1A3470B6028E03D42D1F9A2FDFC30751FF1
4BF0015DF25147B257535A83428614B7148BCDD58FABEA8CB236EE8DA27804EB
E8555B545485D83A9D8EFA44564D1334FE5DF75EEC126857B563D7102C271889
FA4B26BFC7FD173769A39165E2C9E484F4A30ECBEFFDE5246DA9AFF704DD36E5
063948455DC1AB6FA0> |-
/C <1C60D8A8C9B6E80DE798539C04636E273392BC1FCA36EE3B3D9BDA597C5B
9E224C06BB4A4D18B7BD828A3E9F52B1E8E276FDE7CFD191803FC14CC0B519AF
58FD58B931FA356870D99B102AF018EF27080EBCBC7D5F7405A44CD1D1575BB3
698E03E1A6538E9B1359349B7CC7807225431BC9ED07CCDF3B1CB3464D5EFC45
086E41C9AA338FB7401054A0717D7883E61FED3603CC1F60D371DD624DEE2C48> |-
/D <1C60D8A8C9B69A171E0602B6EA9F7FD3661687B9D0318153871D0174B66A
21A15566B857CCB904BD2C86D67025FB2C7CC238903A654C854AF5ADE6C7FC02
16CDEC0E082EB2AA5728F75C9B369F6C5150B933FE09A05084C6258A600A6061
FAA85A3A88BDFDED50AB5542651DB372A9234088F1AABFC5E18119E277941214
B56E87C67F8AE465C8BCFE385A8FC2> |-
/K <1C60D8A8C9B586525755606BB9D8CA4E0BC75B264AA45FE2AA1D00A719FD
CF4A96BCEA92F32AA4AAED6C87A751D99F415492E27F0EFCC8079284148BB58D
28793EBAAFF19109E91CC93DE8B041F0EB3B25834EB6276E6573939DBEADA56F
860BAA444B348B2F30EDE6CCD92D3F5E9F9525AAC0A9521C3A585C2D47692C78
071E25FBA28C8E57659080883C5AEA5ABB6027D239A36B865E89B56CA9A51BA0
0465AA22133FF485CE7BDF927C8761BF5143F9912826133BF22CF836BBE5473F
A568EDEBF5EDA026525EF4BA352472B826F6B8FE47ADE0849864BBC12BD94562
82438815AB99CE33B821CB93691940A969184AAD98E320765E8129E79B3B49E5
8A5612CDADF16022F720D096BA64118308CF9ACB6E4771D4354B59F47C40190A
7AE734E05AA9314F1622B6BBDFD7DAE1892142A68DB0333A9E3F6BC56CB7E9EC
973ADD4DB435914842A4D0CF909FF769> |-
/L <1C60D8A8C9B6079F1E7AD7748A0DA4BEEA66A9E2351439E3459E06E526D7
02F5075AE2F60EBD902E93FB50C40ED310F3E4D00E7FA08010DCC22A2D41725E
1305C9FE2F7AF467928E7735B5BFFBB02DFF1E39A280802992F24395860191C2
5AE7E3B8505AE859679BC4D389E37807BA659D2A001F031AD20A84B4C79D2ACD
31AD6427F2D43C6093E54F526F4A602571A49205449D11A95D72481452> |-
/M <1C60D8A8C9B502E2D0B49938DBB69FFA371F59CDF5066CE8A5C20AA7FC2D
0F8BF4E26F6ABDA9289C0AE4C0E37E2A884A5953B1A06A2074147860D30ABB68
D7C0086747F193C5047E514B405DEBB1E5DCE6B5A3E9DEAF3161D3EF711F3B89
657B08CD561A52276813DC0F7209562D42DFEB3D9188C9FDE9E85C0D5965B713
117EBF00ED5734F2E413F090127E70268D2553F69E50C8AD9B2998EC1FB4968B
87B1F84BF92166E7B156A33DE33F361A6245DC0CE426049E90D18E208513B1E2
50625A3B94C0DA668D714D98935ABA479EE11A21920CB98ADCB0C9F376B6786D
D9E8F9B764AA6E6A4A8DFD31965358AB72EEEFB7F598BD12432E25ACDCF18314
513D98511421A540F250C9544F4EADD8A8C04D225188> |-
/R <1C60D8A8C9B6D5A02F5320E8A3D49239885025A6B60462DA1F01EFEEEEB0
F0275130E12464DF18C7BF1C3EA83C167501CBB0DB85BAFB90649D79D9C04763
C14CD70012922CBE9E0B07EED1BBC557F2D1FB67C390CA93E8F1CED714A42B5D
099BD325B1E0B39D7814B18BD322640D717480EA3F523AF562DB872D6D230FFA
B0583842C7B2163911BF785A3A714B6B39D9E738E576909E32BE551CCDF51874
08DA73ACE42E54CB6B0029180A09AE135F5CEEBAD1069779178BC01A51C24DCF
35C045426EF058F37FB0A9433CEA2C47EACEF69280CEBFC2D0943DFBEAC0B918
495FE6E23A29C977410F5CD0E898B9B02A9876099C32876D20AA84EDCB4675D6
A286B3170DC2B69A5B537488C01652FBA30E28D2D326FE839119> |-
/U <1C60D8A8C9B60355F6C009FE36ED9263B39DD0C42070F1013B6AD0A1982D
B3B9A528772ACB72002E702ACCFE7301151A4C6BC71187CA9947FF5C91534D7D
206BFB0BF86AFF62CFCD2D1813451C9EED766DC1784C3153854BA7626FDC94F4
7AEC269E5CFCC4EFFE7D5D217F6FFFC7516FC0535DE320DB35904D3E97900590
C58E93EC8249164B4211C6C59B77B0B548DC5937AA27C8C7E3E40D44F80EA2C1
3366834CB688C00C9D3543C96F43FC5C7C6D60BD622F39350D13CD590CD30A77
63E22499C68C0872240041C5589AE11E2E99F834DFA166DE00E0C3D2C2BA70BB
14D2B3> |-
/s <1C60D8A8C9B750045F3746ED5BB3CEDC4DABE87B9B58254604A27D6B9E23
4A8853B004113152F59EC4ED78DDE7A2E6F973C3CFB5A1A00760D0A12A7086E9
D04062D64B99A776BB47E86A009AFE82E7A1CD31C9664389D1E2788430A11A4E
B90204B27D484A8CC4389CCAA5D07FA7B267106CEF5C5D1A5B9EF719432FE912
C170A9870E9B903D0A4831231C35F3FA05E2E6D41F63BDA51F228612CE8D1557
E8FF2B93> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUR+CMMI8 /GLAAAA+CMMI8 findfont ct_VMDictPut
/IDENUR+CMMI8*1 
[22{/.notdef}rp /mu 38{/.notdef}rp /slash 3{/.notdef}rp /A /.notdef /C 
/D 6{/.notdef}rp /K /L /M 4{/.notdef}rp /R 2{/.notdef}rp 
/U 29{/.notdef}rp /s 140{/.notdef}rp]
IDENUR+CMMI8 nf
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
199.638 593.633 mo
(A)sh
%ADOBeginSubsetFont: GISAAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GISAAA+CMR8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 48 /zero put
dup 56 /eight put
def
/FontBBox {0 -104 766 665} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/plus <1C60D8A8C9B6AF04CDEB25D12C5E26F197F165B1E846B805E270AB730
DC8C535451A42F505B0ED2CA83B529FD67AD781784D5719F37A18216D7FBA676
CFE90389B3DD18578BC99631B2E3515AEFDAE18B606FB1FA37645C1720541> |-
/zero <1C60D8A8C9B7883CBAA78CA806F705F10D1AC319938D611C6D9BBD69F
6190342FB8FEE9368658E53BCE0AE7824A3280DBA7A5BEF9C087CCC08CFF6EE3
D1CDFAC58984B448A56F36AF08290137970E991F67C347622795CF41E8928BFB
8E257576760A149EDA95EF674E027B6AB519EF80CF7C75785FE2FE5A8F75A351
8927237EA043AA5EE9A8092D5C4A8721DCA0DF83E6E87BB> |-
/eight <1C60D8A8C9B7883CBAA92BB64A311DA1354F5D68776F2608BEB81B80
294D73AA8C3FEDAFF58B4E60701097923423FBE4C36FE8DFBF6F2C385E130C47
988B6844413476018C63C43A8DDDFAE187820C43250C18C9D130DC31BAEF4A60
888F65AD1678646D1687B470D47BD523EE331174DDD0831E389327B2B700E7A6
A776152FCA4C02EC65B75F7B57D7BCCCD6954215D1EB0A1CFBA00896F64363A4
5CDA240697> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUS+CMR8 /GISAAA+CMR8 findfont ct_VMDictPut
/IDENUS+CMR8*1 
[43{/.notdef}rp /plus 4{/.notdef}rp /zero 7{/.notdef}rp /eight 199{/.notdef}rp]
IDENUS+CMR8 nf
IDENUS+CMR8*1 [7.44458 0 0 -7.44458 0 0 ]msf
197.172 600.47 mo
(8)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
206.028 597.668 mo
(;\026)
[8.51823 0 ]xsh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
443.653 610.67 mo
(\(B.6\))
[4.2594 7.73398 3.02618 5.49231 0 ]xsh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
252.544 625.017 mo
(V)sh
IDENUS+CMR8*1 [7.44458 0 0 -7.44458 0 0 ]msf
261.287 620.422 mo
(+)sh
258.932 627.82 mo
(8)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
271.038 625.017 mo
(:)sh
%ADOBeginSubsetFont: BUZAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BUZAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /minus put
def
/FontBBox {0 0 694 270} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 -0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0416667 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IDENUT+CMSY10 /BUZAAA+CMSY10 findfont ct_VMDictPut
/IDENUT+CMSY10*1 
[32{/.notdef}rp /minus 223{/.notdef}rp]
IDENUT+CMSY10 nf
IDENUT+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
277.203 625.017 mo
( )sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
285.834 625.017 mo
(ig)
[3.69885 0 ]xsh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
294.801 626.698 mo
(s)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
298.948 625.017 mo
(T)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
306.906 620.982 mo
(A)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
313.295 625.017 mo
(\015)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
319.572 620.982 mo
(\026)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
324.729 625.017 mo
(\()sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
328.988 625.017 mo
(C)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
336.834 626.698 mo
(L)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
342.662 625.017 mo
(V)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
351.518 620.982 mo
(CKM)
[6.16483 7.28537 0 ]xsh
349.052 627.82 mo
(L)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
373.711 625.017 mo
(P)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
380.772 626.698 mo
(L)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
389.066 625.017 mo
(+)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
400.051 625.017 mo
(C)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
407.898 626.698 mo
(R)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
414.398 625.017 mo
(V)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
423.141 620.982 mo
(CKM)
[6.16479 7.2854 0 ]xsh
420.787 627.82 mo
(R)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
445.335 625.017 mo
(P)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
452.396 626.698 mo
(R)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
458.897 625.017 mo
(\))sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
252.544 598.116 mo
(V)sh
IDENUS+CMR8*1 [7.44458 0 0 -7.44458 0 0 ]msf
261.287 594.081 mo
(0)sh
258.933 600.806 mo
(8)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
268.796 598.116 mo
(:)sh
IDENUT+CMSY10*1 [11.1669 0 0 -11.1669 0 0 ]msf
302.983 598.116 mo
( )sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
314.08 598.116 mo
(ig)
[3.69888 0 ]xsh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
323.048 599.798 mo
(s)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
327.195 598.116 mo
(T)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
335.152 594.081 mo
(A)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
341.542 598.116 mo
(\015)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
347.819 594.081 mo
(\026)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
353.087 598.116 mo
(\()sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
357.347 598.116 mo
(g)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
363.062 592.4 mo
(U=D)
[5.71637 3.9231 0 ]xsh
362.615 601.142 mo
(L)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
379.764 598.116 mo
(P)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
386.825 599.798 mo
(L)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
395.12 598.116 mo
(+)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
406.104 598.116 mo
(g)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
411.821 592.4 mo
(U=D)
[5.71637 3.9231 0 ]xsh
411.372 601.142 mo
(R)sh
IDENUP+CMMI12*1 [11.1669 0 0 -11.1669 0 0 ]msf
428.634 598.116 mo
(P)sh
IDENUR+CMMI8*1 [7.44458 0 0 -7.44458 0 0 ]msf
435.695 599.798 mo
(R)sh
IDENUQ+CMR12*1 [11.1669 0 0 -11.1669 0 0 ]msf
442.085 598.116 mo
(\))sh
159.399 635.777 mo
(.)sh
126.894 635.777 mo
(.)sh
159.399 581.079 mo
(.)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/1 ]]
] del_res
/IDENUT+CMSY10*1 uf
/IDENUT+CMSY10 uf
/BUZAAA+CMSY10 uf
/IDENUS+CMR8*1 uf
/IDENUS+CMR8 uf
/GISAAA+CMR8 uf
/IDENUR+CMMI8*1 uf
/IDENUR+CMMI8 uf
/GLAAAA+CMMI8 uf
/IDENUQ+CMR12*1 uf
/IDENUQ+CMR12 uf
/XFAAAA+CMR12 uf
/IDENUP+CMMI12*1 uf
/IDENUP+CMMI12 uf
/CUFAAA+CMMI12 uf
/IDENUO+CMMI6*1 uf
/IDENUO+CMMI6 uf
/SPVAAA+CMMI6 uf
/IDENUN+CMR8*1 uf
/IDENUN+CMR8 uf
/VXVBAA+CMR8 uf
/IDENUM+CMMI8*1 uf
/IDENUM+CMMI8 uf
/CBIAAA+CMMI8 uf
/IDENUL+CMMI12*1 uf
/IDENUL+CMMI12 uf
/RDHAAA+CMMI12 uf
/IDENUK+CMR12*1 uf
/IDENUK+CMR12 uf
/IRRAAA+CMR12 uf
/IDENUJ+CMSY10*1 uf
/IDENUJ+CMSY10 uf
/FLEAAA+CMSY10 uf
/IDENUI+CMSY8*1 uf
/IDENUI+CMSY8 uf
/XSAAAA+CMSY8 uf
/IDENUH+CMMI6*1 uf
/IDENUH+CMMI6 uf
/DTOAAA+CMMI6 uf
/IDENUG+CMSY6*1 uf
/IDENUG+CMSY6 uf
/FXYAAA+CMSY6 uf
/IDENUF+CMMI8*1 uf
/IDENUF+CMMI8 uf
/LLIBAA+CMMI8 uf
/IDENUE+CMR12*1 uf
/IDENUE+CMR12 uf
/NQPBAA+CMR12 uf
/IDENUD+CMMI12*1 uf
/IDENUD+CMMI12 uf
/LLIAAA+CMMI12 uf
/IDENUC+CMSY10*1 uf
/IDENUC+CMSY10 uf
/YEKBAA+CMSY10 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
